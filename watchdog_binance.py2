#!/usr/bin/env python
import inotify.adapters
import os
import datetime
import psutil
import ConfigParser
import progressbar
load_params = ConfigParser.ConfigParser()

cwd = os.getcwd()

notifier = inotify.adapters.Inotify()
notifier.add_watch(cwd+"/signals")
endTime = datetime.datetime.now() + datetime.timedelta(minutes=15)

script_name = "binance3.py2"
loop_time = datetime.datetime.now()

def ConfigSectionMap(section, Config):
  dict1 = {}
  options = Config.options(section)
  for option in options:    
    try:
      dict1[option] = Config.get(section, option)
      if dict1[option] == -1:
         print("skip: %s" % option)
    except:
      print("exception on %s!" % option)
      dict1[option] = None
  return dict1

load_params.read("binance_api.ini")
loop_schedule_binance3 = ConfigSectionMap("BINANCE_API", load_params)['loop_schedule_binance3']

bar = progressbar.ProgressBar(maxval=int(loop_schedule_binance3), \
widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
bar.start()
bar_update=0
def find_procs_by_name(name):
    "Return a list of processes matching 'name'."
    for p in psutil.process_iter(attrs=["name", "exe", "cmdline"]):
        if name == p.info['name'] or \
                p.info['exe'] and os.path.basename(p.info['exe']) == name or \
                p.info['cmdline'] and p.info['cmdline'][0] == name:
            if p.info['cmdline'][1] ==script_name:
#                print("found:"+script_name)
                return "found:"

#print find_procs_by_name("python2")
        
for event in notifier.event_gen():
    if event is not None:
#        print event      # uncomment to see all events generated
        if 'IN_CREATE' in event[1]:
            print "file '{0}' created in '{1}'".format(event[3], event[2])
            if find_procs_by_name("python2") <> "found:":
                print("launching:" + cwd+"/binance3.py2")
                os.chdir(cwd+"/")
                os.system(cwd+"/binance3.py2")
    else:
#        for i in xrange(20):
        bar_update = bar_update+1
        if bar_update > int(loop_schedule_binance3): bar_update=int(loop_schedule_binance3)
#        print bar_update
        bar.update(bar_update)
#            sleep(0.1)

        diff_time=datetime.datetime.now()-loop_time
#        print "loop in " + cwd+"/signals"+" for "+str(int(diff_time.total_seconds()))
        if int(diff_time.total_seconds()) > int(loop_schedule_binance3)-1:
            bar.finish()
            if find_procs_by_name("python2") <> "found:":
                print("launching:" + cwd+"/binance3.py2")
                os.chdir(cwd+"/")
                os.system(cwd+"/binance3.py2")
            loop_time = datetime.datetime.now()
            load_params.read("binance_api.ini")
            loop_schedule_binance3 = ConfigSectionMap("BINANCE_API", load_params)['loop_schedule_binance3']
            bar = progressbar.ProgressBar(maxval=int(loop_schedule_binance3), \
            widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
            bar.start()
            bar.update(0)
            bar_update = 0
#        print endTime
#        if datetime.datetime.now() >= endTime and find_procs_by_name("python2") == false: print "supp"
