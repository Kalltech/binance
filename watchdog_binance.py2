#!/usr/bin/env python
import inotify.adapters
import os
import datetime
import psutil
#import ConfigParser
import progressbar
import subprocess
import json
#load_params = ConfigParser.ConfigParser()

cwd = os.getcwd()+"/"
json_ini="api4.json"

notifier = inotify.adapters.Inotify()
notifier.add_watch(cwd+"signals")
endTime = datetime.datetime.now() + datetime.timedelta(minutes=15)

loop_time = datetime.datetime.now()

dir_PROBLEMS=cwd+"problems/"
dir_TEMP=cwd+"temp/"
dir_MODELS=cwd+"models/"
dir_SIGNALS=cwd+"signals/"
dir_TRADES=cwd+"trades/"
dir_OLD=cwd+"old/"
dir_BITMEX_LOGS=cwd+"bitmex_logs/"
dir_BINANCE_LOGS=cwd+"logs/"

def clean_old_files(dir_to_search):
    import os
    import datetime

    for dirpath, dirnames, filenames in os.walk(dir_to_search):
       for file in filenames:
          curpath = os.path.join(dirpath, file)
          file_modified = datetime.datetime.fromtimestamp(os.path.getmtime(curpath))
          if datetime.datetime.now() - file_modified > datetime.timedelta(hours=24*14):
              os.remove(curpath)
              print str(curpath)+" removed"

def load_obj(name ):
    with open(name) as json_data:
        dct_load_obj = json.load(json_data)
        json_data.close()
        return dct_load_obj

dct_INI_JSON=load_obj(json_ini)

def ConfigSectionMap(section, Config):
  dict1 = {}
  options = Config.options(section)
  for option in options:    
    try:
      dict1[option] = Config.get(section, option)
      if dict1[option] == -1:
         print("skip: %s" % option)
    except:
      print("exception on %s!" % option)
      dict1[option] = None
  return dict1

dct_INI_JSON=load_obj(json_ini)
#load_params.read("binance_api.ini")
#dct_INI_JSON['int_loop_schedule'] = ConfigSectionMap("BINANCE_API", load_params)['dct_INI_JSON['int_loop_schedule']']

bar = progressbar.ProgressBar(maxval=int(dct_INI_JSON['int_loop_schedule']), \
widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
bar.start()
bar_update=0
def find_procs_by_name(name, script_name):
    "Return a list of processes matching 'name'."
    for p in psutil.process_iter(attrs=["name", "exe", "cmdline"]):
        if p.info['cmdline'] :
            if isinstance(p.info['cmdline'], list):
                if len(p.info['cmdline'])>1:
                    if name == p.info['name']:
#                        print p.info['name']
#                        print str(p.info['cmdline'][1])
                        if p.info['cmdline'][1] ==script_name:
                            print("found:"+script_name)
                            return "found:"

#print find_procs_by_name("python2")

def make_executable(path):
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2    # copy R bits to X
    os.chmod(path, mode)

for event in notifier.event_gen():
    if event is not None:
#        print event      # uncomment to see all events generated
        if 'IN_CREATE' in event[1]:
            print "file '{0}' created in '{1}'".format(event[3], event[2])
            py_file="binance5.py2"
            if find_procs_by_name("python2", py_file) <> "found:":
                print("launching:" + cwd+py_file)
                os.chdir(cwd)
                os.system(cwd+py_file)
    else:
#        for i in xrange(20):
        bar_update = bar_update+1
        if bar_update > int(dct_INI_JSON['int_loop_schedule']): bar_update=int(dct_INI_JSON['int_loop_schedule'])
#        print bar_update
        bar.update(bar_update)
#            sleep(0.1)

        diff_time=datetime.datetime.now()-loop_time
#        print "loop in " + cwd+"signals"+" for "+str(int(diff_time.total_seconds()))
        if int(diff_time.total_seconds()) > int(dct_INI_JSON['int_loop_schedule'])-1:
            bar.finish()
            os.chdir(cwd)
            clean_old_files(dir_TEMP)
            clean_old_files(dir_OLD)
            clean_old_files(dir_PROBLEMS)
            clean_old_files(dir_BITMEX_LOGS)
            clean_old_files(dir_BINANCE_LOGS)
            last_error=""
            py_file="binance5.py2"
            if find_procs_by_name("python2", py_file) <> "found:":
                print("#LAUNCHING:" + cwd+py_file)
                make_executable(cwd+py_file)
                p = subprocess.Popen([cwd+py_file, ""], stderr=subprocess.PIPE)
                p_com=p.communicate()
                if p_com[1]<>"": last_error=last_error+str(datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S"))+"\n"+str(p_com[1])
            py_file="binance4.py2"
            if find_procs_by_name("python2", py_file) <> "found:":
                print("#LAUNCHING:" + cwd+py_file)
                make_executable(cwd+py_file)
                p = subprocess.Popen([cwd+py_file, ""], stderr=subprocess.PIPE)
                p_com=p.communicate()
                if p_com[1]<>"": last_error=last_error+str(datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S"))+"\n"+str(p_com[1])
            py_file="bitmex4.py2"
            if find_procs_by_name("python2", py_file) <> "found:":
                print("#LAUNCHING:" + cwd+py_file)
                make_executable(cwd+py_file)
                p = subprocess.Popen([cwd+py_file, ""], stderr=subprocess.PIPE)
                p_com=p.communicate()
                if p_com[1]<>"": last_error=last_error+str(datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S"))+"\n"+str(p_com[1])
            if last_error<>"" and not "overloaded" in last_error \
            and not "Bad Gateway" in last_error \
            and not "Bad Gateway" in last_error \
            and not "request is outside" in last_error \
            and not "HTTPSConnectionPool" in last_error \
            and not "Read timed out" in last_error:
                text_file = open(cwd+"watchdog_error.log", "a")
                text_file.write(last_error)
                text_file.close()
            loop_time = datetime.datetime.now()
            dct_INI_JSON=load_obj(json_ini)
            bar = progressbar.ProgressBar(maxval=int(dct_INI_JSON['int_loop_schedule']), \
            widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
            bar.start()
            bar.update(0)
            bar_update = 0
#        print endTime
#        if datetime.datetime.now() >= endTime and find_procs_by_name("python2") == false: print "supp"
