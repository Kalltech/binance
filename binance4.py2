#!/usr/bin/env python
#print "Starting"
import datetime
now = datetime.datetime.now()
begin_now = now
#print "Before import:%d" % now.second
#import time
import sys
#import ConfigParser
import binance
import requests
import os
import math
import logging
import telegram
import json
import shutil
import ntpath
import ccxt
now = datetime.datetime.now()

json_ini="api4.json"

#print "After import second:%d" % now.second
#############################################################################################################
#FUNCTIONS###############################################################################################
#############################################################################################################

def debugapp(debugapp_str, **kwargs):
    global tab,  annonce_scriptname
    if "|begin" in debugapp_str:
        tab=tab+"\t"
    debugapp_str=tab+debugapp_str
    debugapp_str=debugapp_str.replace("<module>", "")
    debugapp_exit=kwargs.get('debugapp_exit', None)
    debugapp_SaveObj2Problems=kwargs.get('debugapp_SaveObj2Problems', None)
    debugapp_DebugLevel=kwargs.get('debugapp_DebugLevel', None)
    debugapp_Telegram=kwargs.get('debugapp_Telegram', None)
    debugapp_NoPrintConsole=kwargs.get('debugapp_NoPrintConsole', None)
    debugapp_logger=kwargs.get('debugapp_logger', None)
    if not debugapp_logger: 
        if logger_symbol: 
            debugapp_logger=logger_symbol
        else:
            debugapp_logger=logger
    if debugapp_DebugLevel:
        if debugapp_DebugLevel=="ERROR":
            debugapp_logger.error(str(debugapp_str))
        elif debugapp_DebugLevel=="DEBUG":
            debugapp_logger.debug(str(debugapp_str))
        elif debugapp_DebugLevel=="WARNING":
            debugapp_logger.warning(str(debugapp_str))
        elif debugapp_DebugLevel=="CRITICAL":
            debugapp_logger.critical(str(debugapp_str))
        if not debugapp_NoPrintConsole: print str(debugapp_str)
    else:
        debugapp_logger.info(str(debugapp_str))
        if not debugapp_NoPrintConsole: print str(debugapp_str)
    if debugapp_Telegram: 
        try:
            if 'dct_FILE' in globals(): debugapp_str=dct_FILE['symbol']+":"+debugapp_str
            if annonce_scriptname==False:
                annonce_scriptname=True
                bot.sendMessage(chat_id=dct_INI_JSON['int_my_telegram_id'], text=str(str(os.path.basename(__file__)).upper()+"\n"+debugapp_str))
            else:
                bot.sendMessage(chat_id=dct_INI_JSON['int_my_telegram_id'], text=str(debugapp_str))
        except:
            debugapp_logger.warning("Impossible d envoyer vers Telegram"+str(debugapp_str))
            print str("Impossible d envoyer vers Telegram"+str(debugapp_str))
    if debugapp_SaveObj2Problems:
        #Sauve le fichier au dernier etat
        if "trades" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/trades","/problems")+".laststate")
        if "signals" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/signals","/problems")+".laststate")
        #deplace le fichier de trade dans problems
        try:
            shutil.move(dct_FILE.get("filename"), dir_PROBLEMS+ntpath.basename(dct_FILE.get("filename")))
            if "trades" in  dct_FILE['filename']: shutil.move(dct_FILE.get("filename")+".log", dir_PROBLEMS+ntpath.basename(dct_FILE.get("filename")+".log"))
            dct_FILE.clear
        except: 
            pass
        #deplace le fichier de log dans problems
        try:
            shutil.move(log_file, dir_PROBLEMS+ntpath.basename(log_file))
        except: 
            pass
    if "|end" in debugapp_str:
        tab = tab[:-1]
    if debugapp_exit:
        if 'dct_FILE' in globals(): dct_FILE.clear()
        sys.exit()

def save_json(save_json_path, save_json_data):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    # Open a file for writing
    save_json_file = open(save_json_path,"w")
    # Save the dictionary into this file
    # (the 'indent=4' is optional, but makes it more readable)
    json.dump(save_json_data,save_json_file, indent=4)                                    
    # Close the file
    save_json_file.close()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def b_order(b_order_symbol, b_order_Qty, b_order_price,b_order_side, b_order_level):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG")
    global processed_order
#    order_quantity=exchange.amount_to_precision(dct_FILE['symbol'],b_order_Qty)
#    b_order_price=float(exchange.price_to_precision(dct_FILE['symbol'],b_order_price))
    b_order_price=float(floatXf(b_order_price))
    binance_balances=binance.balances()
    save_json(dir_TEMP+"binance_balances", binance_balances)
    dct_FILE["current_balance"] = binance_balances.get(extract_symbol(dct_FILE["symbol"]))
#    if "USDT" in dct_FILE["symbol"]:
#        dct_FILE["current_balance"] = binance_balances.get(dct_FILE["symbol"].replace("USDT", ""))
#    else:
#        dct_FILE["current_balance"] = binance_balances.get(dct_FILE["symbol"].replace("BTC", ""))
#    debugapp(str(sys._getframe().f_code.co_name)+"|"+"tickSize:\n"+float8f(dct_FILE['PRICE_FILTER_tickSize'])+"\n"+float8f(b_order_price),debugapp_DebugLevel="DEBUG")
#    debugapp(str(sys._getframe().f_code.co_name)+"|"+"tickSize:\n"+floatXf(dct_FILE['PRICE_FILTER_tickSize'])+"\n"+floatXf(b_order_price),debugapp_DebugLevel="DEBUG")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+":free:"+ str(dct_FILE['current_balance']['free']),debugapp_DebugLevel="DEBUG")
#Place l Order selon les parametres et enregistre le fichier COIN_(AC,SL,T1...)
    
    if b_order_side=="BUY":
        b_order_Qty=float(b_order_Qty)
        order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Demande d achat de "+str(order_quantity)+" "+" @Price "+float8f(b_order_price),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.BUY, order_quantity, b_order_price, test=False)
        
    elif b_order_side=="SELL":
        b_order_Qty=float(b_order_Qty)
        b_order_Qty_down= percentage_calc(b_order_Qty, -dct_FILE['float_percentage_control_balance'])
        b_order_Qty_up= percentage_calc(b_order_Qty, dct_FILE['float_percentage_control_balance'])
        if b_order_Qty_down <= float(dct_FILE['current_balance']['free']) <= b_order_Qty_up:
            b_order_Qty=float(dct_FILE['current_balance']['free'])
        order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Demande de vente LIMIT de "+str(order_quantity)+" "+" @Price "+float8f(b_order_price),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.SELL, order_quantity, b_order_price, test=False)
        
    elif b_order_side=="STOP-LIMIT":
        b_order_price_plus_sl_percen=percentage_calc(b_order_price, dct_FILE['float_percentage_sl_upside'])
#        controle de la quantitie et la balance
        b_order_Qty=float(b_order_Qty)
        b_order_Qty_down= percentage_calc(b_order_Qty, -dct_FILE['float_percentage_control_balance'])
        b_order_Qty_up= percentage_calc(b_order_Qty, dct_FILE['float_percentage_control_balance'])
        if b_order_Qty_down <= float(dct_FILE['current_balance']['free']) <= b_order_Qty_up:
            b_order_Qty=float(dct_FILE['current_balance']['free'])
        if dct_FILE["symbol"]=="BTCUSDT":
            order_quantity=format(float(b_order_Qty-0.000001), '.6f')
        else:
            order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        b_order_price=float(floatXf(b_order_price))
        b_order_price_plus_sl_percen=float(floatXf(b_order_price_plus_sl_percen))
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"SL of "+str(order_quantity)+" "+" @Price "+floatXf(b_order_price)+" @stopPrice "+floatXf(b_order_price_plus_sl_percen),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.SELL, order_quantity, floatXf(b_order_price), orderType=binance.STOP_LOSS_LIMIT, test=False, stopPrice=floatXf(b_order_price_plus_sl_percen))

    elif b_order_side=="STOP-LIMIT_TX":
        b_order_price=percentage_calc(b_order_price, dct_FILE['sl_replace_tx_percentage_downside']-0.1)
        b_order_price_plus_sl_percen=percentage_calc(b_order_price, dct_FILE['float_percentage_sl_upside'])
#        controle de la quantitie et la balance
        b_order_Qty=float(b_order_Qty)
        b_order_Qty_down= percentage_calc(b_order_Qty, -dct_FILE['float_percentage_control_balance'])
        b_order_Qty_up= percentage_calc(b_order_Qty, dct_FILE['float_percentage_control_balance'])
        if b_order_Qty_down <= float(dct_FILE['current_balance']['free']) <= b_order_Qty_up:
            b_order_Qty=float(dct_FILE['current_balance']['free'])
        order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        
        b_order_price=float(floatXf(b_order_price))
        b_order_price_plus_sl_percen=float(floatXf(b_order_price_plus_sl_percen))
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Demande de vente STOP-LIMIT_TX de "+str(order_quantity)+" "+" @Price "+floatXf(b_order_price)+" @stopPrice "+floatXf(b_order_price_plus_sl_percen),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.SELL, order_quantity, floatXf(b_order_price), orderType=binance.STOP_LOSS_LIMIT, test=False, stopPrice=floatXf(b_order_price_plus_sl_percen))

    if order.get("orderId") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order OK:"+str(order.get("orderId")),debugapp_DebugLevel="DEBUG")
        save_json(dir_TEMP+dct_FILE['symbol']+"_"+b_order_level+"_"+str(order.get("orderId")), order)
        processed_order=1
        if b_order_side=="STOP-LIMIT":
            dct_FILE['last_SL_orderId']=order.get("orderId")
            dct_FILE['last_SL_stopPrice']=floatXf(b_order_price_plus_sl_percen)
        dct_FILE['dictToBeFilled'][b_order_level]=1
        if dct_FILE['last_orderId']=="init":
            dct_FILE['last_orderId']=order.get("orderId")
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+b_order_level+":orderId empty_"+str(order),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj2Problems=1,debugapp_exit=1)
        if "trades" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/trades","/problems")+".laststate")
        if "signals" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/signals","/problems")+".laststate")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG")
    return order

def check_pause():
    if os.path.exists("pause.txt")==True:
        text_file = open("pause.txt", "r")
        f_time=text_file.read()
        text_file.close()
        f_time=datetime.datetime.strptime(f_time, '%Y-%m-%d %H:%M:%S')
        if f_time<=datetime.datetime.now():
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Remove pause.txt",debugapp_DebugLevel="DEBUG")
            os.remove("pause.txt")
        else:
            t_delay=chop_microseconds(f_time-datetime.datetime.now())
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Script paused for: "+str(t_delay),debugapp_exit=1)

def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)

def float8f(float8f_value):
    return format(float(float8f_value), '.8f')

def floatXf(float8f_value):
    pos=str(float8f(dct_FILE['PRICE_FILTER_tickSize'])).find("1")-1
    return format(float(float8f_value), "."+str(pos)+"f")

def step_size_to_precision(ss):
    return ss.find('1') - 1

def format_stepSize(val, step_size_str):
    val=float(val)
    step_size_str=str(step_size_str)
    if float(step_size_str)==1:
        frac, val=math.modf(float(val))
        val=int(val)
    else:
        precision = step_size_to_precision(step_size_str)
        val= "{:0.0{}f}".format(val, precision+1)
        val=val[:-1]+"0"
        val=float(val)
    return val

def ConfigSectionMap(section, Config):
  dict1 = {}
  options = Config.options(section)
  for option in options:    
    try:
      dict1[option] = Config.get(section, option)
      if dict1[option] == -1:
         print("skip: %s" % option)
    except:
      print("exception on %s!" % option)
      dict1[option] = None
  if dict1 == {}:
    print("unable to read file on ConfigSectionMap")
    sys.exit()
  return dict1

def percentage_calc(percentage_calc_number, percentage_calc_percent):
    percentage_calc_result = float(percentage_calc_number)+float(percentage_calc_number)/100*float(percentage_calc_percent)
    return percentage_calc_result

def save_obj(obj, name ):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin"+"|"+"Sauve l objet vers: "+name,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    save_obj_out_file = open(name,"w")
    json.dump(obj,save_obj_out_file, indent=4, sort_keys=True)                                    
    save_obj_out_file.close()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def load_obj(name ):
    if logger: debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin"+"|"+"Ouvre l objet depuis: "+name,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    with open(name) as json_data:
        dct_load_obj = json.load(json_data)
        json_data.close()
        if logger: debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        return dct_load_obj

def binance_price(binance_price_symbol):
    return float(binance_prices.get(binance_price_symbol))
    
def sell_stats(sell_stats_current_order, sell_stats_current_level, gain_BTC, gain_USD):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    sell_stats_current_order["gain_USD"]=gain_USD
    sell_stats_current_order["gain_BTC"]=gain_BTC
    sell_stats_current_order["level"]=sell_stats_current_level
    sell_stats_current_order["origPrice"]=dct_FILE['order_BUY']['price']
    sell_stats_current_order["origTransactTime"]=dct_FILE['order_BUY']['transactTime']
    sell_stats_file=cwd+"/"+"sell_stats.json"
    sell_stats_date=datetime.datetime.now().strftime("%Y-%m-%d")
    if not os.path.isfile(sell_stats_file):
        dct_sell_stats = {}
        sell_stats_file_obj = open(sell_stats_file,"w")
        json.dump(dct_sell_stats,sell_stats_file_obj, indent=4, sort_keys=True)                                    
        sell_stats_file_obj.close()
    with open(sell_stats_file) as json_data:
        dct_sell_stats = json.load(json_data)
        if not findkeys(dct_sell_stats, sell_stats_date): dct_sell_stats[sell_stats_date] = {}
        dct_sell_stats[sell_stats_date][sell_stats_current_order.get("orderId")] = sell_stats_current_order
        json_data.close()
        sell_stats_file_obj = open(sell_stats_file,"w")
        json.dump(dct_sell_stats,sell_stats_file_obj, indent=4, sort_keys=True)                                    
        sell_stats_file_obj.close()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def which_level_what_do(which_level_what_do_price):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    dct_which_level_what_do = {}
    dct_which_level_what_do['vente_Qty'] = 'init'
    dct_which_level_what_do['vente_Qty_SL'] = 'init'
    dct_which_level_what_do['SL_Price'] = 'init'
    print float8f(which_level_what_do_price)
    which_level_what_do_price=percentage_calc(which_level_what_do_price, dct_FILE['percentage_limit_order_before_tx'])
    print float8f(which_level_what_do_price)
    
    #si t3 vend la mise executedQty_creation-executedQty_vendu
    if dct_FILE['T3'] < which_level_what_do_price:
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation']-dct_FILE['executedQty_vendu']
        dct_which_level_what_do['Current_TX']=dct_FILE['T3']
    #si t2 mais pas t3 ni t1 vend 75% de la mise et met un SL de 25% de la mise a T1
    if dct_FILE['T2'] < which_level_what_do_price and not findkeys(dct_FILE, "order_T3") and not findkeys(dct_FILE, "order_T1"):
        sell_part_t=dct_FILE['sell_part_t1']+dct_FILE['sell_part_t2']
        sell_part_sl=1-sell_part_t
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation'] * sell_part_t
        dct_which_level_what_do['vente_Qty_SL']=dct_FILE['executedQty_creation'] * sell_part_sl
        dct_which_level_what_do['SL_Price']=dct_FILE['T1']
        dct_which_level_what_do['Current_TX']=dct_FILE['T2']
    #si t2 mais pas t3 mais t1 vend 25% de la mise et met un SL de 25% de la mise a T1
    elif dct_FILE['T2'] < which_level_what_do_price and not findkeys(dct_FILE, "order_T3") and findkeys(dct_FILE, "order_T"):
        sell_part_t=dct_FILE['sell_part_t1']+dct_FILE['sell_part_t2']
        sell_part_sl=1-sell_part_t
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation']*dct_FILE['sell_part_t2']
        dct_which_level_what_do['vente_Qty_SL']=dct_FILE['executedQty_creation']*sell_part_sl
        dct_which_level_what_do['SL_Price']=dct_FILE['T1']
        dct_which_level_what_do['Current_TX']=dct_FILE['T2']
    #si t1 mais pas t3 ni t2 vend 50% de la mise et met un SL de ce qu il reste a Achat
    elif dct_FILE['T1'] < which_level_what_do_price and not findkeys(dct_FILE, "order_T3") and not findkeys(dct_FILE, "order_T2"):
        sell_part_t=dct_FILE['sell_part_t1']
        sell_part_sl=1-sell_part_t
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation']*dct_FILE['sell_part_t1']
        dct_which_level_what_do['vente_Qty_SL']=dct_FILE['executedQty_creation']*sell_part_sl
        dct_which_level_what_do['SL_Price']=float(dct_FILE['order_BUY_FILLED']['price'])
        dct_which_level_what_do['Current_TX']=dct_FILE['T1']
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return dct_which_level_what_do

def get_stepSize(get_stepSize_coin):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    symbols=get_stepSize_request.get("symbols")
    coin=filter(lambda symbol: symbol['symbol'] == get_stepSize_coin, symbols)
    a_coin=coin[0]
    filters=a_coin.get("filters")
    LOT_SIZE=filter(lambda filterType: filterType['filterType'] == 'LOT_SIZE', filters)
    a_LOT_SIZE=LOT_SIZE[0]
    stepSize=a_LOT_SIZE.get("stepSize")
    dct_FILE['PRICE_FILTER_tickSize']=float(a_coin['filters'][0]['tickSize'])
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return float(stepSize)

def binance_status(binance_status_symbol,  **kwargs):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    binance_status_test=kwargs.get('binance_status_test', None)
    binance_status_orderId=kwargs.get('orderId', None)
    binance_status_orderId_type=kwargs.get('binance_status_orderId_type', None)
    if binance_status_test:
        debugapp("Envoi d un faux status",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        # Open the file for reading
        if not binance_status_orderId_type:
            in_file = open("NEW_BUY","r")
        else:
            if binance_status_orderId_type=="NEW_BUY": in_file = open(dir_MODELS+"NEW_BUY","r")
            if binance_status_orderId_type=="NEW_SELL": in_file = open(dir_MODELS+"NEW_SELL","r")
            if binance_status_orderId_type=="FILLED_BUY": in_file = open(dir_MODELS+"FILLED_BUY","r")
            if binance_status_orderId_type=="FILLED_SELL": in_file = open(dir_MODELS+"FILLED_SELL","r")
            if binance_status_orderId_type=="CANCELED_BUY": in_file = open(dir_MODELS+"CANCELED_BUY","r")
            if binance_status_orderId_type=="CANCELED_SELL": in_file = open(dir_MODELS+"CANCELED_SELL","r")
            if binance_status_orderId_type=="CANCELED_SL": in_file = open(dir_MODELS+"CANCELED_SL","r")
        # Load the contents from the file, which creates a new dictionary
        binance_status_dict = json.load(in_file)
        # Close the file... we don't need it anymore  
        in_file.close()
        binance_status_dict['orderId']=binance_status_orderId
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        return binance_status_dict
    else:
        debugapp("Envoi du status de binance",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        binance_status_order=binance.orderStatus(binance_status_symbol, orderId=binance_status_orderId)
        if binance_status_order.get("orderId") is not None:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+str(binance_status_order.get("orderId")),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            save_json(dir_TEMP+dct_FILE['symbol']+"_"+str(binance_status_order.get("orderId")), binance_status_order)
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        return binance_status_order

def ToBeFilled():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    for order_level_dictToBeFilled in dct_FILE['dictToBeFilled']:
        allOrders=None
        current_allOrders=None
        order_filtred=None
        if dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]==1:
            allOrders=binance.allOrders(dct_FILE.get("symbol"))
#                    allOrders=binance.allOrders("LOOOMBTC")
            if allOrders :
                save_json(dir_TEMP+dct_FILE['symbol']+"_"+"allOrders", allOrders)
                if isinstance(allOrders, list):
                    order_filtred=filter(lambda allOrders: allOrders['orderId'] == dct_FILE[order_level_dictToBeFilled]['orderId'], allOrders)
                    current_allOrders=order_filtred[0]
                    if current_allOrders['status']=="FILLED":
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Trade FILLED of order_"+str(current_allOrders.get("orderId")),debugapp_DebugLevel="DEBUG")
                        dct_FILE[order_level_dictToBeFilled+"_FILLED"]=current_allOrders
                        dct_FILE['last_order_level']=order_level_dictToBeFilled+"_FILLED"
                        dct_FILE['last_executedQty']=float(current_allOrders.get("executedQty"))
                        if dct_FILE['executedQty_creation']==0:
                            dct_FILE['executedQty_creation']=float(current_allOrders.get("executedQty"))
                        dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                        if current_allOrders['side']=="SELL":
                            dct_FILE['executedQty_vendu']=dct_FILE['executedQty_vendu']+float(current_allOrders['executedQty'])
                            prix_de_vente=float(current_allOrders['price'])
                            prix_achat=float(dct_FILE['order_BUY_FILLED']['price'])
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Diff BTC: "+str(prix_de_vente-prix_achat))
                            gain_BTC=(prix_de_vente-prix_achat)*float(current_allOrders['executedQty'])
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Gain BTC: "+str(gain_BTC))
                            BTCUSDT=float(binance_prices.get("BTCUSDT"))
                            gain_USD=gain_BTC*BTCUSDT
#                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Vente au level:"+order_level_dictToBeFilled,debugapp_Telegram=1)
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Vendu "+str(current_allOrders['executedQty'])+" au level:"+order_level_dictToBeFilled+"\nGain $: "+str(gain_USD),debugapp_Telegram=1)
                            if order_level_dictToBeFilled=="order_T1_SL" and dct_FILE['dictToBeFilled']['order_T1']==1:
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+order_level_dictToBeFilled+": vendu et T1 pas ATTEIND!",debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
                            if order_level_dictToBeFilled=="order_T2_SL" and dct_FILE['dictToBeFilled']["order_T2"]==1:
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+order_level_dictToBeFilled+": vendu et T2 pas ATTEIND!",debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
#                            if order_level_dictToBeFilled <> "hodl_SL":
#                                sell_stats(current_allOrders, order_level_dictToBeFilled, gain_BTC, gain_USD)
                        save_obj(dct_FILE, dct_FILE.get("filename"))
                    elif current_allOrders['status']=="CANCELED":
                        dct_FILE[order_level_dictToBeFilled+"CANCELED"]=current_allOrders
                        dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+str(dct_FILE[order_level_dictToBeFilled])+":CANCELED",debugapp_DebugLevel="WARNING")
                        save_obj(dct_FILE, dct_FILE.get("filename"))
                    else:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"En attente FILLED_"+str(dct_FILE[order_level_dictToBeFilled]['orderId']),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
                else:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+str(dct_FILE[order_level_dictToBeFilled]['orderId'])+":Error:"+str(allOrders['code'])+":"+allOrders['msg'],debugapp_DebugLevel="WARNING")
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+str(dct_FILE[order_level_dictToBeFilled]['orderId'])+":Orders empty:",debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def findkeys(d, findkeys_str):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    for key in d.keys():
        if findkeys_str in key:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            return 1
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return 0
    
def setup_logger(logger_name, log_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    log_setup = logging.getLogger(logger_name)
    fileHandler = logging.FileHandler(log_file, mode='a')
    fileHandler.setFormatter(formatter)
    log_setup.addHandler(fileHandler) 
    log_setup.setLevel(level)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def hodl_first():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    sl_price=percentage_calc(dct_FILE['binance_price'], dct_FILE['float_percentage_max_hodl_sl'])
    if float(dct_FILE['current_balance']['free']) > dct_FILE['LOT_SIZE_stepSize']*10:
        current_hodl_SL=b_order(dct_FILE.get("symbol"), dct_FILE['current_balance']['free'], sl_price,"STOP-LIMIT", "hodl_SL")
#                passe l ordre SL
        if current_hodl_SL.get("orderId") is not None:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"_SL id:"+str(current_hodl_SL.get("orderId")))
            dct_FILE["hodl_SL"]=current_hodl_SL
            dct_FILE["last_order_level"]="hodl_SL"
            dct_FILE['SL']=dct_FILE['binance_price']
#                    dct_FILE['order_BUY']['price']=dct_FILE['binance_price']
#                    dct_FILE['order_BUY']['transactTime']=time.time()
            dct_FILE['order_BUY_FILLED']={}
            dct_FILE['order_BUY_FILLED']['price']=dct_FILE['binance_price']
            dct_FILE['executedQty_creation']=float(dct_FILE['current_balance']['free'])
            save_obj(dct_FILE, dct_FILE.get("filename"))
        else:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"hodl_SL "+":id empty:"+str(current_hodl_SL),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def hodl_tracking():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    global processed_order,  binance_balances
#        if dct_FILE['binance_price'] > percentage_calc(dct_FILE['binance_price'], -1):
#    temp1=dct_FILE['binance_price']
#    dct_FILE['binance_price']=19.7
#    temp2=percentage_calc(dct_FILE['last_SL_stopPrice'], int(-dct_FILE['float_percentage_max_hodl_sl'])+1)
#    temp3=float8f(dct_FILE['current_balance']['free'])
#    temp4=float8f(dct_FILE['LOT_SIZE_stepSize']*10)
#    if dct_FILE['binance_price'] > percentage_calc(dct_FILE['last_SL_stopPrice'], int(-dct_FILE['float_percentage_max_hodl_sl'])+1) :
#            if dct_FILE['binance_price'] > percentage_calc(dct_FILE['last_SL_stopPrice'], int(-dct_FILE['float_percentage_max_hodl_sl'])+1) and float(dct_FILE['current_balance']['locked']) > dct_FILE['LOT_SIZE_stepSize']*10:
    current_order_cancel=binance.cancel(dct_FILE.get("symbol"), orderId=dct_FILE["last_SL_orderId"])
    original_order_to_cancel=dct_FILE["last_order_level"]
#    current_order_cancel=binance_status(dct_FILE.get("symbol"), orderId=order_to_cancel, binance_status_test=1, binance_status_orderId_type="CANCELED_SL")
    if current_order_cancel.get("orderId") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Cancel:"+str(current_order_cancel.get("orderId")))
        save_json(dir_TEMP+dct_FILE['symbol']+"_"+str(current_order_cancel.get("orderId"))+"_C", current_order_cancel)
        dct_FILE["order_CANCELED_ASKED"]=current_order_cancel
        count=0
        processed_order=1
        dct_FILE["last_order_level"]="Loop"
        while count < 30 and dct_FILE["last_order_level"]<>"hodl_SL_tracking":
            debugapp(str(sys._getframe().f_code.co_name)+"|"+str(count)+"s apres debut Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
            #Check si Order bien CANCELED
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Check si Order bien CANCELED")
            current_order_status=binance_status(dct_FILE.get("symbol"), orderId=current_order_cancel['orderId'])
#            current_order_status=binance_status(dct_FILE.get("symbol"), orderId=current_order_cancel['orderId'], binance_status_test=1, binance_status_orderId_type="CANCELED_SL")
            if current_order_status.get("orderId") is not None:
                if current_order_status.get("status")=="CANCELED":
                    dct_FILE['dictToBeFilled'][original_order_to_cancel]=0
                    dct_FILE[dct_FILE.get("last_order_level")+"_CANCELED"]=current_order_status
                    sl_price=percentage_calc(dct_FILE['binance_price'], dct_FILE['float_percentage_max_hodl_sl'])
                    binance_balances=binance.balances()
                    dct_FILE["current_balance"] = binance_balances.get(extract_symbol(dct_FILE["symbol"]))
                    if float(dct_FILE['current_balance']['free']) > dct_FILE['LOT_SIZE_stepSize']*10:
                        current_hodl_SL_tracking=b_order(dct_FILE.get("symbol"), dct_FILE['current_balance']['free'], sl_price,"STOP-LIMIT", "hodl_SL_tracking")
        #                passe l ordre SL
                        if current_hodl_SL_tracking.get("orderId") is not None:
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"_SL id:"+str(current_hodl_SL_tracking.get("orderId")))
#                                    dct_FILE["hodl_SL_tracking"]=current_hodl_SL_tracking
                            dct_FILE['hodl_SL_tracking']=0
#                            dct_FILE["last_SL_orderId"]=current_hodl_SL_tracking.get("orderId")
                            dct_FILE["hodl_SL_tracking"]=current_hodl_SL_tracking
                            dct_FILE["last_order_level"]="hodl_SL_tracking"
                            save_obj(dct_FILE, dct_FILE.get("filename"))
                        else:
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"hodl_SL_tracking "+":id empty:"+str(current_hodl_SL_tracking),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL")
                else:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Attend Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
                    count = count + 1
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE.get("last_order_level")+"_STATUS"+":id empty:"+str(current_order_status),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL")
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE.get("last_order_level")+"_CANCELED"+":id empty:"+str(current_order_cancel),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def extract_symbol(extract_symbol_coin):
    if "BTC" in extract_symbol_coin[-3:]:
        return extract_symbol_coin.replace("BTC", "")
    elif "USDT" in extract_symbol_coin[-4:]:
        return extract_symbol_coin.replace("USDT", "")
    elif "BNB" in extract_symbol_coin[-3:]:
        return extract_symbol_coin.replace("BNB", "")
    elif "ETH" in extract_symbol_coin[-3:]:
        return extract_symbol_coin.replace("ETH", "")
    
def all_sold():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE.get("last_order_level")+" Fin du hodl: deplace le fichier dans old",debugapp_DebugLevel="DEBUG",debugapp_Telegram=1)
    save_obj(dct_FILE, dct_FILE.get("filename"))
    try:
        shutil.move(dct_FILE.get("filename"), dir_OLD+ntpath.basename(dct_FILE.get("filename")))
        shutil.move(dct_FILE.get("filename")+".log", dir_OLD+ntpath.basename(dct_FILE.get("filename")+".log"))
    except: 
        pass
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_DebugLevel="INFO",debugapp_exit=1)

def all_balances():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    binance_balances_total=binance.balances_total()
    binance_balances_temp={}
    binance_usd={}
#    all_usd=float(binance_balances['USDT']['free'])+float(binance_balances['USDT']['locked'])+float(binance_balances['TUSD']['free'])+float(binance_balances['TUSD']['locked'])
    for bals in binance_balances_total:
        binance_balances_temp[bals]=binance_balances_total[bals]["total"]
    btc_value=binance_balances_total['BTC']['total']
    for k, v in binance_prices.iteritems():
        if k[-3:]=="BTC":
            coin=k.replace("BTC", "")
            btc_value=btc_value+float(binance_balances_total[coin]['total']*v)
    binance_usd["total_usd"]=float(binance_prices.get("BTCUSDT"))*btc_value
    binance_usd["total_btc"]=btc_value
    save_json(dir_TEMP+"binance_usd", binance_usd)
    save_json(dir_TEMP+"binance_balances", binance_balances)
    save_json(dir_TEMP+"binance_balances_total", binance_balances_total)
    save_json(dir_TEMP+"binance_prices", binance_prices)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Total estimated USD:"+ str(float(binance_prices.get("BTCUSDT"))*btc_value),debugapp_DebugLevel="INFO", debugapp_logger=logger)

    if "str_key_bitfinex" in dct_INI_JSON:
        if dct_INI_JSON['str_key_bitfinex'] <> "":
            bitfinex = ccxt.bitfinex({
                'apiKey': dct_INI_JSON['str_key_bitfinex'],
                'secret': dct_INI_JSON['str_secret_bitfinex'],
                'enableRateLimit': True,
            })
            bitfinex_balance=bitfinex.fetch_balance()
            bitfinex_prices=bitfinex.fetchTickers()
            all_amount=0
            if 'BTC/USDT'in bitfinex_prices:
                for x in bitfinex_balance['info']:
                    if float(x['amount']) > 0:
                        if x['currency'] <> "btc" and x['currency'] <> "usd":
                            all_amount=all_amount+float(x['amount'])*bitfinex_prices[x['currency'].upper()+'/BTC']['close']
                        elif x['currency'] == "btc":
                            all_amount=all_amount+float(x['amount'])
                        elif x['currency'] == "usd":
                            all_amount=all_amount+float(x['amount'])/bitfinex_prices['BTC/USDT']['close']
                all_amount_usd=all_amount*bitfinex_prices['BTC/USDT']['close']
                bitfinex_usd={}
                bitfinex_usd["total_usd"]=all_amount_usd
                bitfinex_usd["total_btc"]=all_amount
                save_json(dir_TEMP+"bitfinex_usd", bitfinex_usd)

    if "str_key_kraken" in dct_INI_JSON:
        if dct_INI_JSON['str_key_kraken'] <> "":
            kraken = ccxt.kraken({
                'apiKey': dct_INI_JSON['str_key_kraken'],
                'secret': dct_INI_JSON['str_secret_kraken'],
                'enableRateLimit': True,
            })
            kraken_balance=kraken.fetch_balance()
            kraken_prices=kraken.fetchTickers()
            all_amount=0
            if 'BTC/USD'in kraken_prices:
                for x, y in kraken_balance['total'].iteritems():
                    if float(y) > 0:
                        if x <> "BTC" and x <> "USD":
                            all_amount=all_amount+float(y)*kraken_prices[x.upper()+'/BTC']['close']
                        elif x == "BTC":
                            all_amount=all_amount+float(y)
                        elif x == "USD":
                            all_amount=all_amount+float(y)/kraken_prices['BTC/USD']['close']
                all_amount_usd=all_amount*kraken_prices['BTC/USD']['close']
                kraken_usd={}
                kraken_usd["total_usd"]=all_amount_usd
                kraken_usd["total_btc"]=all_amount
                save_json(dir_TEMP+"kraken_usd", kraken_usd)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

#############################################################################################################
#END FUNCTIONS###############################################################################################
#############################################################################################################

begin_time=datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")
cwd = os.getcwd()
logger=None
###load params
dct_INI_JSON=load_obj(json_ini)
###Directories
if not os.path.exists(cwd+"/trades"):
    os.makedirs(cwd+"/trades")
if not os.path.exists(cwd+"/hodl"):
    os.makedirs(cwd+"/hodl")
if not os.path.exists(cwd+"/old"):
    os.makedirs(cwd+"/old")
if not os.path.exists(cwd+"/logs"):
    os.makedirs(cwd+"/logs")
if not os.path.exists(cwd+"/problems"):
    os.makedirs(cwd+"/problems")
if not os.path.exists(cwd+"/signals"):
    os.makedirs(cwd+"/signals")
if not os.path.exists(cwd+"/temp"):
    os.makedirs(cwd+"/temp")
if not os.path.exists(cwd+"/models"):
    os.makedirs(cwd+"/models")
if not os.path.exists(cwd+"/old"):
    os.makedirs(cwd+"/old")
dir_PROBLEMS=cwd+"/problems/"
dir_TEMP=cwd+"/temp/"
dir_MODELS=cwd+"/models/"
dir_SIGNALS=cwd+"/signals/"
dir_TRADES=cwd+"/trades/"
dir_HODL=cwd+"/hodl/"
dir_OLD=cwd+"/old/"
###Logs
logger = logging.getLogger("binance")
level = logging.getLevelName(dct_INI_JSON['str_log_level'])
log_file=cwd+"/logs/binance_"+ datetime.datetime.now().strftime("%Y-%m-%d_%H")+".log"
hdlr = logging.FileHandler(log_file)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(level)
tab=""
debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************", debugapp_logger=logger)
debugapp(str(sys._getframe().f_code.co_name)+"|"+"/////////begin script:"+begin_time, debugapp_logger=logger)
###Telegram
bot = telegram.Bot(token=dct_INI_JSON['str_my_telegram_bot_token'])
###Variables
processed_order=0
###Whitelist,Blacklist
###Binance
binance.set(dct_INI_JSON['str_key_binance'], dct_INI_JSON['str_secret_binance'])
exchange = ccxt.binance({
    'apiKey': dct_INI_JSON['str_key_binance'],
    'secret': dct_INI_JSON['str_secret_binance'],
    'enableRateLimit': True,
})
binance_balance=exchange.fetch_balance()
binance_markets=exchange.fetch_markets()
binance_prices=binance.prices()
binance_balances=binance.balances()
all_balances()

r_exchangeInfo=requests.get("https://www.binance.com/api/v1/exchangeInfo")
get_stepSize_request=r_exchangeInfo.json()
test_binance_prices=None
try:
    test_binance_prices=float(binance_prices.get("ETHBTC"))
except: 
    pass
if test_binance_prices is None:
    binance_prices=binance.prices()
    test_binance_prices=float(binance_prices.get("NEOBTC"))
    if not isinstance(test_binance_prices, float):
        binance_prices=binance.prices()
save_obj(binance_prices, "binance_prices.json")
logger_symbol=None
###Check pause
check_pause()
annonce_scriptname=False

#print binance_prices
debugapp(str(sys._getframe().f_code.co_name)+"|"+"Price:"+"BTCUSDT:"+ str(binance_prices.get("BTCUSDT")),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

#parse le dossier pour les fichiers

for filename in os.listdir(dir_HODL):
    dct_FILE = {}
    if ".json" in filename and not ".log" in filename:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_HODL+filename,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        dct_FILE=load_obj(dir_HODL+filename)
        if not dir_HODL in dct_FILE['filename']:
            dct_FILE['filename']=dir_HODL+filename
        if not dct_FILE['symbol'] in binance_prices:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+":symbol not exist",debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj2Problems=1,debugapp_exit=1)
        dct_FILE['binance_price'] = binance_prices.get(dct_FILE['symbol'].upper())
        dct_FILE['LOT_SIZE_stepSize'] = float(get_stepSize(dct_FILE.get("symbol")))
        setup_logger(dct_FILE['symbol'], dir_HODL+filename+".log")
        logger_symbol= logging.getLogger(dct_FILE['symbol'])
        save_obj(dct_FILE, dct_FILE.get("filename"))
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Cours actuel "+str(float8f(dct_FILE['binance_price']))+" "+dct_FILE['last_order_level'],debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        if dct_FILE['dictToBeFilled'].has_key("hodl_SL"):
            ToBeFilled()
#        if (float(dct_FILE['executedQty_creation'])<=percentage_calc(dct_FILE['executedQty_vendu'], percentage_delta_buyed_sold) and float(dct_FILE['executedQty_creation'])<>0) or findkeys(dct_FILE, "hodl_SLCANCELED"):
        if (float(dct_FILE['executedQty_creation'])<=percentage_calc(dct_FILE['executedQty_vendu'], dct_INI_JSON['float_percentage_delta_buyed_sold']) and float(dct_FILE['executedQty_creation'])<>0):
            all_sold()
        binance_balances=binance.balances()
        binance_prices_temp={}
#        print "Total estimated USD:" + str(float(binance_prices.get("BTCUSDT"))*btc_value)
        dct_FILE["current_balance"] = binance_balances.get(extract_symbol(dct_FILE["symbol"]))
        debugapp(str(sys._getframe().f_code.co_name)+"|"+":Price:"+ str(dct_FILE['binance_price']),debugapp_DebugLevel="INFO", debugapp_logger=logger)
#        if dct_FILE['max_price'] =="init": dct_FILE['max_price'] = dct_FILE['binance_price']
        save_obj(dct_FILE, dct_FILE.get("filename"))
#        creation donc je fixe le premier sl
        if dct_FILE['SL']=="init":
            hodl_first()
#    suivi du SL
#    si le prix actuel est supp de float_percentage_max_hodl_sl+1 alors annulation last_SL et order prix actuel
        elif dct_FILE['binance_price'] > percentage_calc(dct_FILE['last_SL_stopPrice'], int(-dct_FILE['float_percentage_max_hodl_sl'])+0.5) :
            hodl_tracking()
if processed_order==0:
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Aucun traitement",debugapp_DebugLevel="DEBUG")
#    bot.sendMessage(chat_id=dct_INI_JSON['int_my_telegram_id'], text="Aucun traitement")
diff_time=datetime.datetime.now()-begin_now
debugapp(str(sys._getframe().f_code.co_name)+"|"+"/////////end script:"+begin_time+" en "+str(int(diff_time.seconds))+"s",debugapp_DebugLevel="DEBUG")
debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************", debugapp_logger=logger)
sys.exit()
#############################################################################################################
#END SCRIPT##################################################################################################
#############################################################################################################
