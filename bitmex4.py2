#!/usr/bin/env python
#print "Starting"
import datetime
now = datetime.datetime.now()
begin_now = now
#print "Before import:%d" % now.second
#import time
import sys
import ConfigParser
#import bitmex
#import requests
#import pickle
import os
import math
import logging
import telegram
import json
import shutil
import ntpath
import ccxt  # noqa: E402

json_ini="api4.json"

now = datetime.datetime.now()
#print "After import second:%d" % now.second
#############################################################################################################
#FUNCTIONS###############################################################################################
#############################################################################################################
def create_dict():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    signal_dict = {}
    signal_dict['symbol'] = 'init'
    signal_dict['executedDate_creation'] = 'init'
    signal_dict['last_id'] = 'init'
    signal_dict['current_SL'] = 'init'
    signal_dict['last_order_level'] = 'init'
    signal_dict['float_bitmex_price'] = 'init'
    signal_dict['current_balance'] = 'init'
    signal_dict['executedQty_creation'] = 0
    signal_dict['executedQty_vendu'] = 0
    signal_dict['filename'] = 'init'
    signal_dict['dictToBeFilled'] = {}
    signal_dict['last_SL_id'] = 'init'
    signal_dict['alerts_near_sl'] = 0
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return signal_dict
    
def debugapp(debugapp_str, **kwargs):
    global tab,  annonce_scriptname
    if "|begin" in debugapp_str:
        tab=tab+"\t"
    debugapp_str=tab+debugapp_str
    debugapp_str=debugapp_str.replace("<module>", "")
    debugapp_exit=kwargs.get('debugapp_exit', None)
    debugapp_SaveObj=kwargs.get('debugapp_SaveObj', None)
    debugapp_DebugLevel=kwargs.get('debugapp_DebugLevel', None)
    debugapp_Telegram=kwargs.get('debugapp_Telegram', None)
    debugapp_NoPrintConsole=kwargs.get('debugapp_NoPrintConsole', None)
    debugapp_logger=kwargs.get('debugapp_logger', None)
    if not debugapp_logger: 
        if logger_symbol: 
            debugapp_logger=logger_symbol
        else:
            debugapp_logger=logger
    if debugapp_DebugLevel:
        if debugapp_DebugLevel=="ERROR":
            debugapp_logger.error(str(debugapp_str))
        elif debugapp_DebugLevel=="DEBUG":
            debugapp_logger.debug(str(debugapp_str))
        elif debugapp_DebugLevel=="WARNING":
            debugapp_logger.warning(str(debugapp_str))
        elif debugapp_DebugLevel=="CRITICAL":
            debugapp_logger.critical(str(debugapp_str))
        if not debugapp_NoPrintConsole: print str(debugapp_str)
    else:
        debugapp_logger.info(str(debugapp_str))
        if not debugapp_NoPrintConsole: print str(debugapp_str)
    if debugapp_Telegram: 
        try:
            if 'dct_FILE' in globals(): debugapp_str=dct_FILE['symbol']+":"+debugapp_str
            if annonce_scriptname==False:
                annonce_scriptname=True
                bot.sendMessage(chat_id=dct_INI_JSON['int_my_telegram_id'], text=str(str(os.path.basename(__file__)).upper()+"\n"+debugapp_str))
            else:
                bot.sendMessage(chat_id=dct_INI_JSON['int_my_telegram_id'], text=str(debugapp_str))
        except:
            debugapp_logger.warning("Impossible d envoyer vers Telegram"+str(debugapp_str))
            print str("Impossible d envoyer vers Telegram"+str(debugapp_str))
    if debugapp_SaveObj:
        #Sauve le fichier au dernier etat
        if "bitmex_trades" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/bitmex_trades","/problems")+".laststate")
        if "bitmex_signals" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/bitmex_signals","/problems")+".laststate")
        #deplace le fichier de trade dans problems
        try:
            shutil.move(dct_FILE.get("filename"), dir_PROBLEMS+ntpath.basename(dct_FILE.get("filename")))
            if "bitmex_trades" in  dct_FILE['filename']: shutil.move(dct_FILE.get("filename")+".log", dir_PROBLEMS+ntpath.basename(dct_FILE.get("filename")+".log"))
            dct_FILE.clear
        except: 
            pass
        #deplace le fichier de log dans problems
        try:
            shutil.move(log_file, dir_PROBLEMS+ntpath.basename(log_file))
        except: 
            pass
    if "|end" in debugapp_str:
        tab = tab[:-1]
    if debugapp_exit:
        if 'dct_FILE' in globals(): dct_FILE.clear()
        sys.exit()

def save_json(save_json_path, save_json_data):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    # Open a file for writing
    save_json_file = open(save_json_path,"w")
    # Save the dictionary into this file
    # (the 'indent=4' is optional, but makes it more readable)
    json.dump(save_json_data,save_json_file, indent=4)                                    
    # Close the file
    save_json_file.close()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def b_order(b_order_symbol, b_order_Qty, b_order_price,b_order_side, b_order_level):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    global processed_order
    order_quantity=exchange.amount_to_precision(dct_FILE['symbol'],b_order_Qty)
    b_order_price=float(exchange.price_to_precision(dct_FILE['symbol'],b_order_price))
    b_order_price=floatXf_tickSize(b_order_price)
    b_order_price= ('{:.' + str(bitmex_actual_market['precision']['price']) + 'f}').format(float(b_order_price))
    
    if "order_T" in b_order_level:
        b_order_Qty=float(b_order_Qty)
        type = 'limit'  # or 'LimitIfTouched'  # or 'market', or 'Stop' or 'StopLimit'
        params = {
#            'stopPx': exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen),  # if needed
            'text': filename,  # if needed
            'execInst':'ReduceOnly', 
        }
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Demande "+b_order_side+" de "+str(order_quantity)+" "+" @Price "+float8f(b_order_price),debugapp_Telegram=1)
        try:
            order= exchange.create_order(b_order_symbol, type, b_order_side, order_quantity, b_order_price, params)
        except Exception as e:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"create_order problem:"+str(e),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj=1,debugapp_exit=1)
    elif (b_order_side=="buy" or b_order_side=="sell") and b_order_level<>"order_SL":
        b_order_Qty=float(b_order_Qty)
        type = 'limit'
        params = {
        #    'stopPx': 6500.0,  # if needed
            'text': filename,  # if needed
        }
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Mise $:"+str(dct_FILE['USD'])+"\nDemande "+b_order_side+" de "+str(order_quantity)+" "+" @Price "+float8f(b_order_price),debugapp_Telegram=1)
        try:
            order= exchange.create_order(b_order_symbol, type, b_order_side, order_quantity, b_order_price, params)
        except Exception as e:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"create_order problem:"+str(e),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj=1,debugapp_exit=1)
    elif b_order_level=="order_SL":
        if b_order_side=="sell":
            type = 'Stop'  # or 'market', or 'Stop' or 'StopLimit' or LimitIfTouched or MarketIfTouched
            b_order_price_plus_sl_percen=percentage_calc(b_order_price, dct_FILE['float_percentage_sl_upside'])
        else:
            type = 'Stop'  # or 'market', or 'Stop' or 'StopLimit'
            b_order_price_plus_sl_percen=percentage_calc(b_order_price, -dct_FILE['float_percentage_sl_upside'])
        b_order_Qty=float(b_order_Qty)
        b_order_price_plus_sl_percen=float(exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen))
        params = {
            'stopPx': b_order_price,  # if needed
            'execInst':'ReduceOnly', 
            'text': filename,  # if needed
            'displayQty': 0,  # if needed
        }
        debugapp(str(sys._getframe().f_code.co_name)+"|"+b_order_level+" of "+str(order_quantity)+" "+" @Price "+exchange.price_to_precision(dct_FILE['symbol'],b_order_price),debugapp_Telegram=1)
        try:
            order= exchange.create_order(b_order_symbol, type, b_order_side, order_quantity, None, params)
        except Exception as e:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"create_order problem:"+str(e),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj=1,debugapp_exit=1)

    if order.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order OK:"+str(order.get("id")),debugapp_DebugLevel="DEBUG")
        save_json(dir_TEMP+dct_FILE['symbol'].replace("/", "")+"_"+b_order_level+"_"+str(order.get("id")), order)
        processed_order=1
        if b_order_level=="order_SL":
            dct_FILE['last_SL_id']=order.get("id")
            dct_FILE['last_SL_stopPrice']=exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen)
        dct_FILE['dictToBeFilled'][b_order_level]=1
        if dct_FILE['last_id']=="init":
            dct_FILE['last_id']=order.get("id")
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+b_order_level+":id empty_"+str(order),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj=1,debugapp_exit=1)
        if "bitmex_trades" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/bitmex_trades","/problems")+".laststate")
        if "bitmex_signals" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/bitmex_signals","/problems")+".laststate")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return order

def check_pause():
    if os.path.exists("pause.txt")==True:
        text_file = open("pause.txt", "r")
        f_time=text_file.read()
        text_file.close()
        f_time=datetime.datetime.strptime(f_time, '%Y-%m-%d %H:%M:%S')
        if f_time<=datetime.datetime.now():
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Remove pause.txt",debugapp_DebugLevel="DEBUG")
            os.remove("pause.txt")
        else:
            t_delay=chop_microseconds(f_time-datetime.datetime.now())
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Script paused for: "+str(t_delay),debugapp_exit=1)

def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)
    
def load_trade(load_trade_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG")
#    global COIN,Buy_price_signal,T1,T2,T3,SL,USD
    global dct_FILE
    dct_FILE=create_dict()
    parse_Trade = ConfigParser.ConfigParser()
    parse_Trade.read(load_trade_file)
    dct_FILE['float_percentage_under_tx']=dct_INI_JSON['float_percentage_under_tx']
    dct_FILE['float_percentage_force_sl']=dct_INI_JSON['float_percentage_force_sl']
    dct_FILE['float_percentage_max_sl']=dct_INI_JSON['float_percentage_max_sl']

    dct_FILE['symbol'] = ConfigSectionMap("TRADE", parse_Trade)['c']
    dct_FILE['POS'] = ConfigSectionMap("TRADE", parse_Trade)['pos']
    dct_FILE['BUY'] = float(ConfigSectionMap("TRADE", parse_Trade)['ac'])
    dct_FILE['T1'] = float(ConfigSectionMap("TRADE", parse_Trade)['t1'])
    dct_FILE['T1'] = percentage_calc(dct_FILE['T1'], dct_FILE['float_percentage_under_tx'])
    dct_FILE['T2'] = float(ConfigSectionMap("TRADE", parse_Trade)['t2'])
    dct_FILE['T2'] = percentage_calc(dct_FILE['T2'], dct_FILE['float_percentage_under_tx'])
    dct_FILE['T3'] = float(ConfigSectionMap("TRADE", parse_Trade)['t3'])
    dct_FILE['T3'] = percentage_calc(dct_FILE['T3'], dct_FILE['float_percentage_under_tx'])
    dct_FILE['SL'] = float(ConfigSectionMap("TRADE", parse_Trade)['sl'])
    dct_FILE['CHNL'] = ConfigSectionMap("TRADE", parse_Trade)['chnl']
    if dct_FILE['float_percentage_max_sl'] <> 0:
        if percentage_calc(dct_FILE['BUY'], dct_FILE['float_percentage_max_sl']) > dct_FILE['SL']:
            dct_FILE['SL'] = percentage_calc(dct_FILE['BUY'], dct_FILE['float_percentage_max_sl'])
    if dct_FILE['float_percentage_force_sl'] <> 0:
        dct_FILE['SL'] = percentage_calc(dct_FILE['BUY'], dct_FILE['float_percentage_force_sl'])
    if ConfigSectionMap("TRADE", parse_Trade)['usd'] <> "": dct_FILE['USD'] = float(ConfigSectionMap("TRADE", parse_Trade)['usd'])
    dct_FILE['filename']=load_trade_file
    debugapp(str(sys._getframe().f_code.co_name)+"|"+float8f(dct_FILE['BUY'])+"/"+float8f(dct_FILE['T1'])+"/"+float8f(dct_FILE['T2'])+"/"+float8f(dct_FILE['T3'])+"/"+float8f(dct_FILE['SL']),debugapp_DebugLevel="DEBUG")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG")
    return dct_FILE

def float8f(float8f_value):
    return format(float(float8f_value), '.8f')

def floatXf_tickSize(float8f_value):
    if "0.5" in str(bitmex_actual_market['info']['tickSize']):
        return format(float(round(float8f_value * 2) / 2), "."+"1f")
    else:
        pos=str(float8f(bitmex_actual_market['info']['tickSize'])).find("1")-1
        if pos<0:pos=-pos
        return format(float(float8f_value), "."+str(pos)+"f")

def step_size_to_precision(ss):
    return ss.find('1') - 1

def format_stepSize(val, step_size_str):
    val=float(val)
    step_size_str=str(step_size_str)
    if float(step_size_str)==1:
        frac, val=math.modf(float(val))
        val=int(val)
    else:
        precision = step_size_to_precision(step_size_str)
        val= "{:0.0{}f}".format(val, precision+1)
        val=val[:-1]+"0"
        val=float(val)
    return val

def ConfigSectionMap(section, Config):
  dict1 = {}
  options = Config.options(section)
  for option in options:    
    try:
      dict1[option] = Config.get(section, option)
      if option[:5]=="bool_":
          if dict1[option].lower()=="true":
              dict1[option]=True
          elif dict1[option].lower()=="false":
              dict1[option]=False
      if option[:4]=="int_":
          dict1[option]=int(dict1[option])
      if option[:6]=="float_":
          dict1[option]=float(dict1[option])
      if option[:5]=="list_":
          dict1[option]=dict1[option].replace("{", "").replace("}", "").split(",")
#          if dict1[option][0]=="" and len(dict1[option])==1:dict1[option]=None
      if option[:6]=="array_":
          dict_option=json.loads(dict1[option])
          for o in dict_option:
              if o[:5]=="bool_":
                  if dict_option[o].lower()=="true":
                      dict_option[o]=True
                  elif dict_option[o].lower()=="false":
                      dict_option[o]=False
              if o[:4]=="int_":
                  dict_option[o]=int(dict_option[o])
              if o[:6]=="float_":
                  dict_option[o]=float(dict_option[o])
          dict1[option]=dict_option
      if dict1[option] == -1:
         print("skip: %s" % option)
    except:
      print("exception on %s!" % option)
      dict1[option] = None
  if dict1 == {}:
    print("unable to read file on ConfigSectionMap")
    sys.exit()
  return dict1

def percentage_calc(percentage_calc_number, percentage_calc_percent):
    percentage_calc_result = float(percentage_calc_number)+float(percentage_calc_number)/100*float(percentage_calc_percent)
    return percentage_calc_result

def b_trade_to_order(b_trade_to_order_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    global bitmex_actual_market
    #Prend le trade puis fait un achat s'il est dans les seuils
    load_trade(b_trade_to_order_file)
    trade_date = ntpath.basename(b_trade_to_order_file).replace(dct_FILE['symbol']+"_", "")
    f_time=datetime.datetime.strptime(trade_date.replace("_", " "), '%Y-%m-%d %H.%M.%S')
    diff_time=datetime.datetime.now().replace(microsecond=0)-f_time
    trade_diff_minutes = int(diff_time.seconds/60)
    dct_FILE['USD']=dct_INI_JSON['int_usd_to_bet_bitmex']
    dct_FILE['int_leverage_bitmex']=dct_INI_JSON['int_leverage_bitmex']
    for chat in dct_INI_JSON:
        if "array_telegram_chat_list" in chat:
            channel=dct_FILE['CHNL'].replace("chnl:", "").split(":")
            if channel[0].lower() in dct_INI_JSON[chat]['str_channel'].lower() and channel[0]<>"":
                if not dct_INI_JSON[chat]['bool_auto_trade_bitmex']:
                    try:
                        shutil.move(dir_BITMEX_SIGNALS+filename, dir_OLD+filename)
                    except: 
                        pass
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['CHNL']+":Autotrade off, move to old",debugapp_DebugLevel="INFO", debugapp_logger=logger,debugapp_Telegram=1,debugapp_exit=1)
                elif dct_INI_JSON['int_signal_lifetime_minutes']<= trade_diff_minutes or dct_INI_JSON[chat]['int_lifetime_minutes_bitmex']<=trade_diff_minutes:
                    try:
                        shutil.move(dir_BITMEX_SIGNALS+filename, dir_OLD+filename)
                    except: 
                        pass
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Signal obsolete, move to old",debugapp_Telegram=1,debugapp_DebugLevel="INFO", debugapp_logger=logger,debugapp_exit=1)
                else:
                    dct_FILE['USD']=dct_INI_JSON[chat]['int_usd_bitmex']
                    dct_FILE['int_leverage_bitmex']=dct_INI_JSON[chat]['int_leverage_bitmex']
                    break
    if dct_FILE['symbol'] not in dct_INI_JSON['list_blacklist']:
        if (dct_INI_JSON['list_whitelist'][0] <> "" and dct_FILE['symbol'] in dct_INI_JSON['list_whitelist']) or dct_INI_JSON['list_whitelist'][0]  == "":
            for market in bitmex_markets:
                if market['id']==dct_FILE['symbol']:
                    dct_FILE['symbol']=market['symbol']
                    bitmex_actual_market=market
                    break
#            bitmex_actual_market=list(filter(lambda d: d['id'] in dct_FILE['symbol'], bitmex_markets))
            if bitmex_actual_market is not None:
                bitmex_market_xbt=list(filter(lambda d: d['id'] in ".XBT", bitmex_markets))
    #Calc if price is on seuils
                dct_FILE['float_percentage_delta_buy_bitmex']=dct_INI_JSON['float_percentage_delta_buy_bitmex']
                Buy_price_signal_down= percentage_calc(dct_FILE['BUY'], -dct_FILE['float_percentage_delta_buy_bitmex'])
                Buy_price_signal_up= percentage_calc(dct_FILE['BUY'], dct_FILE['float_percentage_delta_buy_bitmex'])
                dct_FILE['float_bitmex_price'] = bitmex_actual_market['info']['askPrice']
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Le prix demande est "+float8f(dct_FILE['BUY']), debugapp_logger=logger)
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Le prix actuel est "+float8f(dct_FILE['float_bitmex_price']), debugapp_logger=logger)
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Seuils: "+float8f(Buy_price_signal_down)+"<XXX<"+float8f(Buy_price_signal_up), debugapp_logger=logger)
                if Buy_price_signal_down <= dct_FILE['float_bitmex_price'] <= Buy_price_signal_up:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+":prix entre les seuils d achat:"+float8f(dct_FILE['float_bitmex_price']), debugapp_logger=logger)
                    if dct_FILE['POS']=="long":
                        side="buy"
                    elif dct_FILE['POS']=="short":
                        side="sell"
                    if bitmex_actual_market['symbol'][-3:]=="USD":
                        Qty_signal=dct_FILE['USD']
                    elif not "BTC"==bitmex_actual_market['base']:
                        Qty_signal=dct_FILE['USD']/(bitmex_market_xbt[0]['info']['lastPrice']*dct_FILE['float_bitmex_price'])
                    else:
                        Qty_signal=dct_FILE['USD']
                    sell_part_tx_low=dct_INI_JSON['float_sell_part_t3_bitmex']
                    if sell_part_tx_low>dct_INI_JSON['float_sell_part_t2_bitmex']:sell_part_tx_low=dct_INI_JSON['float_sell_part_t2_bitmex']
                    if sell_part_tx_low>dct_INI_JSON['float_sell_part_t1_bitmex']:sell_part_tx_low=dct_INI_JSON['float_sell_part_t1_bitmex']
                    Qty_signal_min=exchange.amount_to_precision(dct_FILE['symbol'],Qty_signal*sell_part_tx_low)
                    if Qty_signal_min<>0:
                        b_TRADE=b_order(dct_FILE['symbol'], Qty_signal, dct_FILE['BUY'],side.lower(), "order_BUY")
                        if b_TRADE.get("id") is not None:
                            try:
                                exchange.private_post_position_leverage({"symbol": bitmex_actual_market['id'], "leverage": "10"})
                            except Exception as e:
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Unable to set leverage to:"+"10",debugapp_Telegram=1,debugapp_DebugLevel="WARNING")
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"private_post_position_leverage problem:"+str(e),debugapp_Telegram=1,debugapp_DebugLevel="WARNING")
                            try:
                                exchange.private_post_position_leverage({"symbol": bitmex_actual_market['id'], "leverage": str(dct_FILE['int_leverage_bitmex'])})
                            except Exception as e:
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Unable to set leverage to:"+str(dct_FILE['int_leverage_bitmex']),debugapp_Telegram=1,debugapp_DebugLevel="WARNING")
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"private_post_position_leverage problem:"+str(e),debugapp_Telegram=1,debugapp_DebugLevel="WARNING")
                            dct_FILE['last_id']=b_TRADE.get("id")
                            dct_FILE['order_BUY']=b_TRADE
                            dct_FILE['executedDate_creation']=datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")
                            dct_FILE['last_order_level']='order_BUY'
                            dct_FILE['filename']=dir_BITMEX_TRADES+dct_FILE['symbol'].replace("/", "")+"_"+datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")+".json"
                            dct_FILE['float_sell_part_t1_bitmex']=dct_INI_JSON['float_sell_part_t1_bitmex']
                            dct_FILE['float_sell_part_t2_bitmex']=dct_INI_JSON['float_sell_part_t2_bitmex']
                            dct_FILE['float_sell_part_t3_bitmex']=dct_INI_JSON['float_sell_part_t3_bitmex']
                            dct_FILE['float_percentage_control_balance']=dct_INI_JSON['float_percentage_control_balance']
                            dct_FILE['float_percentage_sl_upside']=dct_INI_JSON['float_percentage_sl_upside']
                            dct_FILE['float_percentage_limit_order_before_tx']=dct_INI_JSON['float_percentage_limit_order_before_tx']
                            dct_FILE['bool_sl_replace_tx']=dct_INI_JSON['bool_sl_replace_tx']
                            if -dct_INI_JSON['float_sl_replace_tx_percentage_downside']<dct_INI_JSON['float_percentage_sl_upside']:
                                dct_FILE['float_sl_replace_tx_percentage_downside']=-dct_INI_JSON['float_percentage_sl_upside']
                            else:
                                dct_FILE['float_sl_replace_tx_percentage_downside']=dct_INI_JSON['float_sl_replace_tx_percentage_downside']
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order OK: deplace le fichier signal vers: "+b_trade_to_order_file.replace("/bitmex_trades","/old"),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
                            save_obj(dct_FILE, dct_FILE['filename'])
                            try:
                                shutil.move(b_trade_to_order_file, dir_OLD+ntpath.basename(b_trade_to_order_file))
                            except:
                                pass
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_DebugLevel="INFO",debugapp_exit=1)
                        else:
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order not OK:\n"+str(b_trade_to_order_file),debugapp_Telegram=1, debugapp_logger=logger)
                    else:
                        try:
                            shutil.move(dir_BITMEX_SIGNALS+filename, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
                        except: 
                            pass
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Mise pas assez grande:"+str(dct_FILE['USD'])+":EXIT",debugapp_Telegram=1,debugapp_DebugLevel="ERROR",debugapp_exit=1)
                else:
                  debugapp(str(sys._getframe().f_code.co_name)+"|"+":prix PAS entre les seuils d achat:"+float8f(dct_FILE['float_bitmex_price']),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Inconnu: "+str(b_trade_to_order_file),debugapp_Telegram=1,debugapp_DebugLevel="ERROR", debugapp_logger=logger)
                try:
                    shutil.move(b_trade_to_order_file, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
                except: 
                    pass
                debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_Telegram=1,debugapp_DebugLevel="ERROR",debugapp_exit=1)
        else:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Not in list_whitelist: "+str(b_trade_to_order_file),debugapp_Telegram=1,debugapp_DebugLevel="ERROR", debugapp_logger=logger)
            try:
                shutil.move(b_trade_to_order_file, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
            except: 
                pass
            debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_DebugLevel="INFO",debugapp_exit=1)
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"In dct_INI_JSON['list_blacklist']: "+str(b_trade_to_order_file),debugapp_Telegram=1,debugapp_DebugLevel="ERROR", debugapp_logger=logger)
        try:
            shutil.move(b_trade_to_order_file, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
        except: 
            pass
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_DebugLevel="INFO",debugapp_exit=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def save_obj(obj, name ):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin"+"|"+"Sauve l objet vers: "+name,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    if not ".json" in name and not ".laststate" in name:
            pass
    else:
        save_obj_out_file = open(name,"w")
        json.dump(obj,save_obj_out_file, indent=4, sort_keys=True)                                    
        save_obj_out_file.close()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def load_obj(name ):
    if logger: debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin"+"|"+"Ouvre l objet depuis: "+name,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    with open(name) as json_data:
        dct_load_obj = json.load(json_data)
        json_data.close()
        if logger: debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        return dct_load_obj

def ToBeFilled():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    allOrders=exchange.fetch_orders(dct_FILE.get("symbol"))
    if allOrders :
        if isinstance(allOrders, list):
            save_json(dir_TEMP+dct_FILE['symbol'].replace("/", "")+"_"+"allOrders", allOrders)
            for order_level_dictToBeFilled in dct_FILE['dictToBeFilled']:
                if dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]==1:
                    order_filtred=filter(lambda allOrders: allOrders['id'] == dct_FILE[order_level_dictToBeFilled]['id'], allOrders)
                    if len(order_filtred)>0:
                        current_allOrders=order_filtred[0]
                        if current_allOrders['status']=="rejected":
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+order_level_dictToBeFilled+":"+current_allOrders['status']+"!",debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
                        elif current_allOrders['status']=="canceled":
                            dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                            save_obj(dct_FILE, dct_FILE.get("filename"))
                        else:
                            if float(current_allOrders['filled'])==float(current_allOrders['amount']):
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Trade of "+str(current_allOrders['amount'])+" @Level "+order_level_dictToBeFilled+" FILLED @Price:"+str(current_allOrders.get("price")),debugapp_DebugLevel="DEBUG",debugapp_Telegram=1)
                                dct_FILE[order_level_dictToBeFilled+"_FILLED"]=current_allOrders
                                dct_FILE['last_order_level']=order_level_dictToBeFilled+"_FILLED"
                                dct_FILE['last_executedQty']=float(current_allOrders['filled'])
                                if dct_FILE['executedQty_creation']==0:
                                    dct_FILE['executedQty_creation']=float(current_allOrders['filled'])
                                dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                                if dct_FILE['last_order_level']<>"order_BUY_FILLED":
                                    dct_FILE['executedQty_vendu']=dct_FILE['executedQty_vendu']+float(current_allOrders['filled'])
                                save_obj(dct_FILE, dct_FILE.get("filename"))
                            else:
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"En attente FILLED_"+str(dct_FILE[order_level_dictToBeFilled]['id']),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
                    else:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+order_level_dictToBeFilled+" n existe plus!",debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj=1,debugapp_exit=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def findkeys(d, findkeys_str):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    for key in d.keys():
        if findkeys_str in key:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            return 1
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return 0
    
def setup_logger(logger_name, log_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    log_setup = logging.getLogger(logger_name)
    fileHandler = logging.FileHandler(log_file, mode='a')
    fileHandler.setFormatter(formatter)
    log_setup.addHandler(fileHandler) 
    log_setup.setLevel(level)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def all_sold():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    if dct_FILE['last_order_level']=="order_T3_FILLED": sell_stats("order_T3_FILLED")    
    if dct_FILE['last_order_level']=="order_SL_FILLED": sell_stats("order_SL_FILLED")    
    for order_level_dictToBeFilled in dct_FILE['dictToBeFilled']:
        if dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]==1:
            current_order=exchange.fetch_order(dct_FILE[order_level_dictToBeFilled]['id'])
            if current_order.get("id") is not None:
                if current_order.get("status")=="Canceled":
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Deja annule! "+order_level_dictToBeFilled+" order_ "+str(current_order.get("id")),debugapp_DebugLevel="DEBUG")
                    dct_FILE[order_level_dictToBeFilled+'_CANCELED']=current_order
                    dct_FILE['last_order_level']=order_level_dictToBeFilled+'_CANCELED'
                    dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                    save_obj(dct_FILE, dct_FILE.get("filename"))
                else:
                    current_order_SL_CANCEL= exchange.cancel_order(dct_FILE[order_level_dictToBeFilled]['id'])
                    if current_order_SL_CANCEL.get("id") is not None:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Annule "+order_level_dictToBeFilled+" order_ "+str(current_order_SL_CANCEL.get("id")),debugapp_DebugLevel="DEBUG")
                        dct_FILE[order_level_dictToBeFilled+'_CANCELED']=current_order_SL_CANCEL
                        dct_FILE['last_order_level']=order_level_dictToBeFilled+'_CANCELED'
                        dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                        save_obj(dct_FILE, dct_FILE.get("filename"))
                    else:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_SL_CANCEL),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_SL_CANCEL),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE.get("last_order_level")+" Fin du trade: deplace le fichier dans old",debugapp_DebugLevel="DEBUG",debugapp_Telegram=1)
    save_obj(dct_FILE, dct_FILE.get("filename"))
    try:
        shutil.move(dct_FILE.get("filename"), dir_OLD+ntpath.basename(dct_FILE.get("filename")))
        shutil.move(dct_FILE.get("filename")+".log", dir_OLD+ntpath.basename(dct_FILE.get("filename")+".log"))
    except: 
        pass
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_DebugLevel="INFO",debugapp_exit=1)

def not_all_sold():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    for order_level_dictToBeFilled in dct_FILE['dictToBeFilled']:
        if dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]==1:
            current_order_SL_CANCEL= exchange.cancel_order(dct_FILE[order_level_dictToBeFilled]['id'])
            if current_order_SL_CANCEL.get("id") is not None:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Annule order a cause vendu>creation_ "+str(current_order_SL_CANCEL.get("id")),debugapp_DebugLevel="CRITICAL")
                dct_FILE[order_level_dictToBeFilled+'_CANCELED']=current_order_SL_CANCEL
                dct_FILE['last_order_level']=order_level_dictToBeFilled+'_CANCELED'
                save_obj(dct_FILE, dct_FILE.get("filename"))
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_SL_CANCEL),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    for order_FilledToBeCanceled in dct_FILE:
        if "_FILLED" in order_FilledToBeCanceled:
            current_order_SL_CANCEL= exchange.cancel_order(dct_FILE[order_FilledToBeCanceled]['id'])
            if current_order_SL_CANCEL.get("id") is not None:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Annule order a cause vendu>creation_ "+str(current_order_SL_CANCEL.get("id")),debugapp_DebugLevel="CRITICAL")
                dct_FILE[order_FilledToBeCanceled+'_CANCELED']=current_order_SL_CANCEL
                dct_FILE['last_order_level']=order_FilledToBeCanceled+'_CANCELED'
                save_obj(dct_FILE, dct_FILE.get("filename"))
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_SL_CANCEL),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE.get("last_order_level")+" Fin du trade: deplace le fichier dans old",debugapp_DebugLevel="DEBUG",debugapp_Telegram=1)
    save_obj(dct_FILE, dct_FILE.get("filename"))
    try:
        shutil.move(dct_FILE.get("filename"), dir_OLD+ntpath.basename(dct_FILE.get("filename")))
        shutil.move(dct_FILE.get("filename")+".log", dir_OLD+ntpath.basename(dct_FILE.get("filename")+".log"))
    except: 
        pass
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['last_order_level']+":EXIT",debugapp_DebugLevel="INFO",debugapp_exit=1)

def sell_stats(sell_stats_level):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    prix_de_vente=float(dct_FILE[sell_stats_level]['info']['avgPx'])
    prix_achat=float(dct_FILE['order_BUY_FILLED']['info']['avgPx'])
    vente_qty=float(dct_FILE[sell_stats_level]['info']['cumQty'])
    if bitmex_actual_market['base']=="BTC":
        gain_BTC=(1/prix_achat-1/prix_de_vente)*float(vente_qty)
    else:
        gain_BTC=(1/prix_achat-1/prix_de_vente)*float(vente_qty)*prix_achat**2
    bitmex_market_xbt=list(filter(lambda d: d['id'] in ".XBT", bitmex_markets))
    BTCUSDT=float(bitmex_market_xbt[0]['info']['lastPrice'])
    gain_USD=gain_BTC*BTCUSDT
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Gain BTC: "+format(gain_BTC, '.5f'),debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Gain $: "+format(gain_USD, '.1f'),debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    
def t1_filled():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
#            def edit_order(self, id, symbol, type, side, amount=None, price=None, params={}):
#    b_order_price=float(exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['BUY']))
    if dct_FILE['order_SL']['side']=="buy":
        type = 'Stop'  # or 'market', or 'Stop' or 'StopLimit'
#        b_order_price_plus_sl_percen=percentage_calc(b_order_price, -dct_FILE['float_percentage_sl_upside'])
    else:
        type = 'Stop'  # or 'market', or 'Stop' or 'StopLimit'
#        b_order_price_plus_sl_percen=percentage_calc(b_order_price, dct_FILE['float_percentage_sl_upside'])
    b_order_Qty=float(dct_FILE['executedQty_creation'])-float(dct_FILE['executedQty_vendu'])
    order_quantity=exchange.amount_to_precision(dct_FILE['symbol'],b_order_Qty)
    sell_stats("order_T1_FILLED")    
#    b_order_price_plus_sl_percen=float(exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen))
#    debugapp(str(sys._getframe().f_code.co_name)+"|"+"SL of "+str(order_quantity)+" "+" @stopPrice "+exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen),debugapp_Telegram=1)
    params = {
        'stopPx': exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['order_BUY_FILLED']['info']['avgPx']),  # if needed
#        'stopPx': exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['order_SL']['info']['stopPx']),  # if needed
#        'text': filename,  # if needed
        'displayQty': 0,  # if needed
    }
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"SL of "+str(order_quantity)+" "+" @stopPrice "+exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['order_SL']['info']['stopPx']),debugapp_Telegram=1)
#    current_order_SL_EDIT= exchange.edit_order(dct_FILE['order_SL']['id'], dct_FILE.get("symbol"), type, dct_FILE['order_SL']['side'], order_quantity,  None,  params)
    current_order_SL_EDIT= exchange.edit_order(dct_FILE['order_SL']['id'], dct_FILE.get("symbol"), type, dct_FILE['order_SL']['side'], order_quantity,  None,  params)
    if current_order_SL_EDIT.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Edit SL order_ "+str(current_order_SL_EDIT.get("id")),debugapp_DebugLevel="DEBUG")
        dct_FILE['order_SL']=current_order_SL_EDIT
        dct_FILE['last_order_level']='order_SL_T1'
        dct_FILE['current_SL']='order_SL'
        save_obj(dct_FILE, dct_FILE.get("filename"))
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_SL_EDIT),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def t2_filled():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
#            def edit_order(self, id, symbol, type, side, amount=None, price=None, params={}):
#    b_order_price=float(exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['T1']))
    if dct_FILE['order_SL']['side']=="buy":
        type = 'Stop'  # or 'market', or 'Stop' or 'StopLimit'
#        b_order_price_plus_sl_percen=percentage_calc(b_order_price, -dct_FILE['float_percentage_sl_upside'])
    else:
        type = 'Stop'  # or 'market', or 'Stop' or 'StopLimit'
#        b_order_price_plus_sl_percen=percentage_calc(b_order_price, dct_FILE['float_percentage_sl_upside'])
    b_order_Qty=float(dct_FILE['executedQty_creation'])-float(dct_FILE['executedQty_vendu'])
    order_quantity=exchange.amount_to_precision(dct_FILE['symbol'],b_order_Qty)
    sell_stats("order_T1_FILLED")    
#    b_order_price_plus_sl_percen=float(exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen))
    params = {
        'stopPx': exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['order_BUY']['price']),  # if needed
#        'text': filename,  # if needed
        'displayQty': 0,  # if needed
    }
#    debugapp(str(sys._getframe().f_code.co_name)+"|"+"SL of "+str(order_quantity)+" "+" @stopPrice "+exchange.price_to_precision(dct_FILE['symbol'],b_order_price_plus_sl_percen),debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"SL of "+str(order_quantity)+" "+" @stopPrice "+exchange.price_to_precision(dct_FILE['symbol'],dct_FILE['order_BUY']['price']),debugapp_Telegram=1)
    current_order_SL_EDIT= exchange.edit_order(dct_FILE['order_SL']['id'], dct_FILE.get("symbol"), type, dct_FILE['order_SL']['side'], order_quantity,  None,  params)
    if current_order_SL_EDIT.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Edit SL order"+str(current_order_SL_EDIT.get("id")),debugapp_DebugLevel="DEBUG")
        dct_FILE['order_SL']=current_order_SL_EDIT
        dct_FILE['last_order_level']='order_SL_T2'
        dct_FILE['current_SL']='order_SL'
        save_obj(dct_FILE, dct_FILE.get("filename"))
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_SL_EDIT),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def buy_filled():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    #lance l Order de SL avec les bonnes valeurs
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"last_order_level=order_BUY_FILLED",debugapp_DebugLevel="DEBUG")
    if dct_FILE['order_BUY_FILLED']['side']=="buy":
        side = "sell"
    else:
        side="buy"
    current_order_BUY_FILLED=b_order(dct_FILE['symbol'], dct_FILE['order_BUY_FILLED']['filled'], dct_FILE['SL'],side, "order_SL")
    if current_order_BUY_FILLED.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"OK SL order",debugapp_DebugLevel="DEBUG")
        dct_FILE['order_SL']=current_order_BUY_FILLED
        dct_FILE['last_order_level']='order_SL'
        dct_FILE['current_SL']='order_SL'
        save_obj(dct_FILE, dct_FILE.get("filename"))
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_BUY_FILLED),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)

    current_order_BUY_FILLED=b_order(dct_FILE['symbol'], dct_FILE['order_BUY_FILLED']['filled']*dct_FILE['float_sell_part_t1_bitmex'], dct_FILE['T1'],side, "order_T1")
    if current_order_BUY_FILLED.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"OK T1 order",debugapp_DebugLevel="DEBUG")
        dct_FILE['order_T1']=current_order_BUY_FILLED
        save_obj(dct_FILE, dct_FILE.get("filename"))
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_BUY_FILLED),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)

    current_order_BUY_FILLED=b_order(dct_FILE['symbol'], dct_FILE['order_BUY_FILLED']['filled']*dct_FILE['float_sell_part_t2_bitmex'], dct_FILE['T2'],side, "order_T2")
    if current_order_BUY_FILLED.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"OK T2 order",debugapp_DebugLevel="DEBUG")
        dct_FILE['order_T2']=current_order_BUY_FILLED
        save_obj(dct_FILE, dct_FILE.get("filename"))
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_BUY_FILLED),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)

    current_order_BUY_FILLED=b_order(dct_FILE['symbol'], dct_FILE['order_BUY_FILLED']['filled']-dct_FILE['order_T1']['amount']-dct_FILE['order_T2']['amount'], dct_FILE['T3'],side, "order_T3")
    if current_order_BUY_FILLED.get("id") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"OK T3 order",debugapp_DebugLevel="DEBUG")
        dct_FILE['order_T3']=current_order_BUY_FILLED
        save_obj(dct_FILE, dct_FILE.get("filename"))
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_BUY_FILLED),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

#############################################################################################################
#END FUNCTIONS###############################################################################################
#############################################################################################################

begin_time=datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")
cwd = os.getcwd()
logger=None
###load params
dct_INI_JSON=load_obj(json_ini)
###Directories
if not os.path.exists(cwd+"/bitmex_signals"):
    os.makedirs(cwd+"/bitmex_signals")
if not os.path.exists(cwd+"/old"):
    os.makedirs(cwd+"/old")
if not os.path.exists(cwd+"/bitmex_logs"):
    os.makedirs(cwd+"/bitmex_logs")
if not os.path.exists(cwd+"/problems"):
    os.makedirs(cwd+"/problems")
if not os.path.exists(cwd+"/bitmex_trades"):
    os.makedirs(cwd+"/bitmex_trades")
if not os.path.exists(cwd+"/temp"):
    os.makedirs(cwd+"/temp")
if not os.path.exists(cwd+"/models"):
    os.makedirs(cwd+"/models")
if not os.path.exists(cwd+"/old"):
    os.makedirs(cwd+"/old")
dir_PROBLEMS=cwd+"/problems/"
dir_TEMP=cwd+"/temp/"
dir_MODELS=cwd+"/models/"
dir_BITMEX_SIGNALS=cwd+"/bitmex_signals/"
dir_BITMEX_TRADES=cwd+"/bitmex_trades/"
dir_OLD=cwd+"/old/"
dir_LOGS=cwd+"/bitmex_logs/"
###Logs
logger = logging.getLogger("bitmex")
level = logging.getLevelName(dct_INI_JSON['str_log_level'])
log_file=dir_LOGS+"bitmex_"+ datetime.datetime.now().strftime("%Y-%m-%d_%H")+".log"
hdlr = logging.FileHandler(log_file)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(level)
logger_symbol=None
tab=""
debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************", debugapp_logger=logger)
debugapp(str(sys._getframe().f_code.co_name)+"|"+"/////////begin script:"+begin_time, debugapp_logger=logger)
###Telegram
bot = telegram.Bot(token=dct_INI_JSON['str_my_telegram_bot_token'])
#debugapp(str(sys._getframe().f_code.co_name)+"|"+str(bot.get_me()),debugapp_DebugLevel="DEBUG")
###Variables
processed_order=0
###bitmex
#bitmex_test = dct_INI_JSON['bitmex_test']
if dct_INI_JSON['bool_test_bitmex']:
    bitmex_key = dct_INI_JSON['str_key_test_bitmex']
    bitmex_secret = dct_INI_JSON['str_secret_test_bitmex']
else:
    bitmex_key = dct_INI_JSON['str_key_bitmex']
    bitmex_secret = dct_INI_JSON['str_secret_bitmex']

###Bitmex
exchange = ccxt.bitmex({
    'apiKey': bitmex_key,
    'secret': bitmex_secret,
    'enableRateLimit': True,
})
if 'test' in exchange.urls and dct_INI_JSON['bool_test_bitmex']:
    exchange.urls['api'] = exchange.urls['test']
try:
    bitmex_balance=exchange.fetch_balance()
except: 
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Problem bitmex GET",debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_exit=1)
bitmex_markets=exchange.fetch_markets()

bitmex_symbols=[]
for x in bitmex_markets:
    bitmex_symbols.append(x['symbol'])
save_obj(bitmex_symbols, "bitmex_contracts.json")
#save_obj(dct_INI_JSON, json_ini)

###Check pause
check_pause()
annonce_scriptname=False
#print bitmex_prices
debugapp(str(sys._getframe().f_code.co_name)+"|"+"Bitmex:"+"Balance BTC:"+ str(bitmex_balance['BTC']['total']),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
bitmex_usd={}
bitmex_usd["total_usd"]=exchange.markets_by_id['XBTUSD']['info']['bidPrice']*bitmex_balance['BTC']['total']
bitmex_usd["total_btc"]=bitmex_balance['BTC']['total']
save_json(dir_TEMP+"bitmex_usd", bitmex_usd)

#parse le dossier pour les fichiers
for filename in os.listdir(dir_BITMEX_TRADES):
    dct_FILE = {}
    if ".json" in filename and not ".log" in filename:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_BITMEX_TRADES+filename,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        dct_FILE=load_obj(dir_BITMEX_TRADES+filename)
#        bitmex_actual_market=list(filter(lambda d: d['id'] in dct_FILE['symbol'], bitmex_markets))
        bitmex_actual_market=None
        for market in bitmex_markets:
            if market['id']==dct_FILE['symbol']:
                dct_FILE['symbol']=market['symbol']
                bitmex_actual_market=market
                break
            elif market['symbol']==dct_FILE['symbol']:
                bitmex_actual_market=market
                break
        dct_FILE['float_bitmex_price'] = bitmex_actual_market['info']['bidPrice']
#        print bitmex_actual_market['symbol']
#        print exchange.price_to_precision(bitmex_actual_market['symbol'],bitmex_actual_market['info']['tickSize'])
        setup_logger(dct_FILE['symbol'], dir_BITMEX_TRADES+filename+".log")
        logger_symbol= logging.getLogger(dct_FILE['symbol'])
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Cours actuel "+str(float8f(dct_FILE['float_bitmex_price']))+" "+dct_FILE['last_order_level'],debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        save_obj(dct_FILE, dct_FILE.get("filename"))

        if dct_FILE['executedQty_creation']=="init": dct_FILE['executedQty_creation']=0
    #############################################################################################################
    #TESTS###############################################################################################
    #############################################################################################################
        open_orders=exchange.fetch_open_orders(dct_FILE.get("symbol"))
        if dct_FILE['dictToBeFilled'].has_key("order_BUY"):
            ToBeFilled()
        if float(dct_FILE['executedQty_creation'])<float(dct_FILE['executedQty_vendu']):
            not_all_sold()
        if (float(dct_FILE['executedQty_creation'])==float(dct_FILE['executedQty_vendu'])) and dct_FILE['executedQty_creation']<>0:
            all_sold()
        if dct_FILE.get("last_order_level")=='order_T1_FILLED':
            t1_filled()
        if dct_FILE.get("last_order_level")=='order_T2_FILLED':
            t2_filled()
        if dct_FILE.get("last_order_level")=='order_BUY_FILLED':
            buy_filled()
    elif not ".json" in filename and not ".log" in filename:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_BITMEX_TRADES+filename,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        dct_FILE=load_obj(dir_BITMEX_TRADES+filename)
        shutil.move(dct_FILE.get("filename"), dir_OLD+ntpath.basename(dct_FILE.get("filename")))
        dct_FILE['filename']=dir_BITMEX_TRADES+filename+".json"
        save_obj(dct_FILE, dct_FILE.get("filename"))

if 'dct_FILE' in globals(): dct_FILE.clear()

logger_symbol = logging.getLogger("bitmex")
for filename in os.listdir(dir_BITMEX_SIGNALS):
    if 'dct_FILE' in globals(): dct_FILE.clear()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_BITMEX_SIGNALS+filename)
    text_file = open(dir_BITMEX_SIGNALS+filename, "r")
    f_signal=text_file.read()
    text_file.close()
    load_trade(dir_BITMEX_SIGNALS+filename)
    bitmex_actual_market=None
    for market in bitmex_markets:
        if market['id']==dct_FILE['symbol']:
            dct_FILE['symbol']=market['symbol']
            break
    if dct_FILE['symbol'].replace("/", "") in str(os.listdir(dir_BITMEX_TRADES)):
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Position already exist on same coin, move to old:"+dir_BITMEX_SIGNALS+filename,debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
        shutil.move(dir_BITMEX_SIGNALS+filename, dir_OLD+filename)
    elif "[TRADE]" in f_signal and dct_INI_JSON['bool_auto_trade_bitmex']:
        b_trade_to_order(dir_BITMEX_SIGNALS+filename)
    elif not dct_INI_JSON['bool_auto_trade_bitmex']:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Autotrade off, move to old:"+dir_BITMEX_SIGNALS+filename,debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
        shutil.move(dir_BITMEX_SIGNALS+filename, dir_OLD+filename)
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Signal false:"+dir_BITMEX_SIGNALS+filename,debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
        shutil.move(dir_BITMEX_SIGNALS+filename, dir_OLD+filename)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************")

if processed_order==0:
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Aucun traitement",debugapp_DebugLevel="DEBUG")
#    bot.sendMessage(chat_id=dct_INI_JSON['int_my_telegram_id'], text="Aucun traitement")
diff_time=datetime.datetime.now()-begin_now
debugapp(str(sys._getframe().f_code.co_name)+"|"+"/////////end script:"+begin_time+" en "+str(int(diff_time.seconds))+"s",debugapp_DebugLevel="DEBUG")
debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************", debugapp_logger=logger)
sys.exit()
#############################################################################################################
#END SCRIPT##################################################################################################
#############################################################################################################
