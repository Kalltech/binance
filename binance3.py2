#!/usr/bin/env python
print "Starting"
import datetime
now = datetime.datetime.now()
print "Before import:%d" % now.second
import time
import sys
import ConfigParser
import binance
import requests
import pickle
import os
import math
import logging
import telegram
import json
import shutil
import ntpath
now = datetime.datetime.now()
print "After import second:%d" % now.second
#############################################################################################################
#FUNCTIONS###############################################################################################
#############################################################################################################
def create_dict():
    signal_dict = {}
    signal_dict['symbol'] = 'test'
    signal_dict['executedDate_creation'] = 'test'
    signal_dict['last_orderId'] = 'test'
    signal_dict['current_SL'] = 'test'
    signal_dict['last_order_level'] = 'test'
    signal_dict['binance_price'] = 'test'
    signal_dict['current_balance'] = 'test'
    signal_dict['executedQty_creation'] = 0
    signal_dict['executedQty_vendu'] = 0
    signal_dict['filename'] = 'test'
    signal_dict['dictToBeFilled'] = {}
    signal_dict['LOT_SIZE_stepSize'] = 'test'
    signal_dict['last_SL_orderId'] = 'test'
    return signal_dict
    
def debugapp(debugapp_str, **kwargs):
    debugapp_str=debugapp_str.replace("<module>", "")
    debugapp_exit=kwargs.get('debugapp_exit', None)
    debugapp_SaveObj=kwargs.get('debugapp_SaveObj', None)
    debugapp_DebugLevel=kwargs.get('debugapp_DebugLevel', None)
    debugapp_Telegram=kwargs.get('debugapp_Telegram', None)
    debugapp_Print=kwargs.get('debugapp_Print', None)
    debugapp_logger=kwargs.get('debugapp_logger', None)
    if not debugapp_logger: 
        if logger_symbol: 
            debugapp_logger=logger_symbol
        else:
            debugapp_logger=logger
    if debugapp_Telegram: 
        try:
            debugapp_str=dct_FILE['symbol']+":"+debugapp_str
            bot.sendMessage(chat_id=my_telegram_id, text=str(debugapp_str))
        except:
            debugapp_logger.warning("Impossible d envoyer vers Telegram"+str(debugapp_str))
            print str("Impossible d envoyer vers Telegram"+str(debugapp_str))
    if debugapp_DebugLevel:
        if debugapp_DebugLevel=="ERROR":
            debugapp_logger.error(str(debugapp_str))
        elif debugapp_DebugLevel=="DEBUG":
            debugapp_logger.debug(str(debugapp_str))
        elif debugapp_DebugLevel=="WARNING":
            debugapp_logger.warning(str(debugapp_str))
        elif debugapp_DebugLevel=="CRITICAL":
            debugapp_logger.critical(str(debugapp_str))
        if not debugapp_Print: print str(debugapp_str)
    else:
        debugapp_logger.info(str(debugapp_str))
        if not debugapp_Print: print str(debugapp_str)
    if debugapp_SaveObj:
        #Sauve le fichier au dernier etat
        if "trades" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/trades","/problems")+".laststate")
        if "signals" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/signals","/problems")+".laststate")
        #deplace le fichier de trade dans problems
        try:
            shutil.move(dct_FILE.get("filename"), dir_PROBLEMS+ntpath.basename(dct_FILE.get("filename")))
            shutil.move(dct_FILE.get("filename")+".log", dir_PROBLEMS+ntpath.basename(dct_FILE.get("filename")+".log"))
        except: 
            pass
        #deplace le fichier de log dans problems
        try:
            shutil.move(log_file, dir_PROBLEMS+ntpath.basename(log_file))
        except: 
            pass
    if debugapp_exit:
        sys.exit()

def save_json(save_json_path, save_json_data):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG")
    # Open a file for writing
    save_json_file = open(save_json_path,"w")
    # Save the dictionary into this file
    # (the 'indent=4' is optional, but makes it more readable)
    json.dump(save_json_data,save_json_file, indent=4)                                    
    # Close the file
    save_json_file.close()
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG")

def b_order(b_order_symbol, b_order_Qty, b_order_price,b_order_side, b_order_level):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG")
    b_order_price=float(float8f(b_order_price))
    binance_balances=binance.balances()
    save_json(dir_TEMP+"binance_balances", binance_balances)
    dct_FILE["current_balance"] = binance_balances.get(dct_FILE["symbol"].replace("BTC", ""))
#    debugapp(str(sys._getframe().f_code.co_name)+"|"+"tickSize:\n"+float8f(dct_FILE['PRICE_FILTER_tickSize'])+"\n"+float8f(b_order_price),debugapp_DebugLevel="DEBUG")
#    debugapp(str(sys._getframe().f_code.co_name)+"|"+"tickSize:\n"+floatXf(dct_FILE['PRICE_FILTER_tickSize'])+"\n"+floatXf(b_order_price),debugapp_DebugLevel="DEBUG")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+b_order_symbol.replace("BTC", "")+":free:"+ str(dct_FILE['current_balance']['free']),debugapp_DebugLevel="DEBUG")
#Place l Order selon les parametres et enregistre le fichier COIN_(AC,SL,T1...)
    
    if b_order_side=="BUY":
        b_order_Qty=float(b_order_Qty)
        order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Achat de "+str(order_quantity)+" "+b_order_symbol+" a "+float8f(b_order_price),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.BUY, order_quantity, b_order_price, test=False)
        
    elif b_order_side=="SELL":
        b_order_Qty=float(b_order_Qty)
        b_order_Qty_down= percentage_calc(b_order_Qty, -dct_FILE['percentage_control_balance'])
        b_order_Qty_up= percentage_calc(b_order_Qty, dct_FILE['percentage_control_balance'])
        if b_order_Qty_down <= float(dct_FILE['current_balance']['free']) <= b_order_Qty_up:
            b_order_Qty=float(dct_FILE['current_balance']['free'])
        order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Vente de "+str(order_quantity)+" "+b_order_symbol+" a "+float8f(b_order_price),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.SELL, order_quantity, b_order_price, test=False)
        
    elif b_order_side=="STOP-LIMIT":
        b_order_price_plus_01_percen=float(format(b_order_price+b_order_price*0.001*float(dct_FILE['percentage_sl_upside']), '.8f'))
        b_order_price_plus_01_percen=percentage_calc(b_order_price, dct_FILE['percentage_sl_upside'])
        b_order_Qty=float(b_order_Qty)
        b_order_Qty_down= percentage_calc(b_order_Qty, -dct_FILE['percentage_control_balance'])
        b_order_Qty_up= percentage_calc(b_order_Qty, dct_FILE['percentage_control_balance'])
        if b_order_Qty_down <= float(dct_FILE['current_balance']['free']) <= b_order_Qty_up:
            b_order_Qty=float(dct_FILE['current_balance']['free'])
        order_quantity=format_stepSize(b_order_Qty, dct_FILE['LOT_SIZE_stepSize'])
        b_order_price=float(floatXf(b_order_price))
        b_order_price_plus_01_percen=float(floatXf(b_order_price_plus_01_percen))
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"SL of "+str(order_quantity)+" "+b_order_symbol+" @ "+floatXf(b_order_price)+" @ stop "+floatXf(b_order_price_plus_01_percen),debugapp_Telegram=1)
        order=binance.order(b_order_symbol, binance.SELL, order_quantity, floatXf(b_order_price), orderType=binance.STOP_LOSS_LIMIT, test=False, stopPrice=floatXf(b_order_price_plus_01_percen))
    if order.get("orderId") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order OK:"+str(order.get("orderId")),debugapp_DebugLevel="DEBUG")
        save_json(dir_TEMP+str(order.get("orderId")), order)
        processed_order=1
        if b_order_side=="STOP-LIMIT":
            dct_FILE['last_SL_orderId']=order.get("orderId")
        dct_FILE['dictToBeFilled'][b_order_level]=1
        if dct_FILE['last_orderId']=="test":
            dct_FILE['last_orderId']=order.get("orderId")
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+b_order_level+":orderId empty_"+str(order),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL",debugapp_SaveObj=1,debugapp_exit=1)
        if "trades" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/trades","/problems")+".laststate")
        if "signals" in  dct_FILE['filename']: save_obj(dct_FILE, dct_FILE['filename'].replace("/signals","/problems")+".laststate")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG")
    return order

def check_pause():
    if os.path.exists("pause.txt")==True:
        text_file = open("pause.txt", "r")
        f_time=text_file.read()
        text_file.close()
        f_time=datetime.datetime.strptime(f_time, '%Y-%m-%d %H:%M:%S')
        if f_time<=datetime.datetime.now():
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Remove pause.txt",debugapp_DebugLevel="DEBUG")
            os.remove("pause.txt")
        else:
            t_delay=chop_microseconds(f_time-datetime.datetime.now())
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Script paused for: "+str(t_delay))
            sys.exit()

def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)
    
def load_trade(load_trade_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG")
#    global COIN,Buy_price_signal,T1,T2,T3,SL,USD
    global dct_FILE
    dct_FILE=create_dict()
    parse_Trade = ConfigParser.ConfigParser()
    parse_Trade.read(load_trade_file)
    dct_FILE['percentage_under_tx']=percentage_under_tx
    dct_FILE['percentage_force_sl']=percentage_force_sl

    dct_FILE['symbol'] = ConfigSectionMap("TRADE", parse_Trade)['c']
    dct_FILE['BUY'] = float(ConfigSectionMap("TRADE", parse_Trade)['ac'])
    dct_FILE['T1'] = float(ConfigSectionMap("TRADE", parse_Trade)['t1'])
    dct_FILE['T1'] = percentage_calc(dct_FILE['T1'], dct_FILE['percentage_under_tx'])
    dct_FILE['T2'] = float(ConfigSectionMap("TRADE", parse_Trade)['t2'])
    dct_FILE['T2'] = percentage_calc(dct_FILE['T2'], dct_FILE['percentage_under_tx'])
    dct_FILE['T3'] = float(ConfigSectionMap("TRADE", parse_Trade)['t3'])
    dct_FILE['T3'] = percentage_calc(dct_FILE['T3'], dct_FILE['percentage_under_tx'])
    dct_FILE['SL'] = float(ConfigSectionMap("TRADE", parse_Trade)['sl'])
    if dct_FILE['percentage_force_sl'] <> 0: dct_FILE['SL'] = percentage_calc(dct_FILE['BUY'], dct_FILE['percentage_force_sl'])
    dct_FILE['USD'] = float(ConfigSectionMap("TRADE", parse_Trade)['usd'])
    dct_FILE['filename']=load_trade_file
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+"/"+float8f(dct_FILE['BUY'])+"/"+float8f(dct_FILE['T1'])+"/"+float8f(dct_FILE['T2'])+"/"+float8f(dct_FILE['T3'])+"/"+float8f(dct_FILE['SL']),debugapp_DebugLevel="DEBUG")
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG")
    return dct_FILE

def float8f(float8f_value):
    return format(float(float8f_value), '.8f')

def floatXf(float8f_value):
    pos=str(float8f(dct_FILE['PRICE_FILTER_tickSize'])).find("1")-1
    return format(float(float8f_value), "."+str(pos)+"f")

def step_size_to_precision(ss):
    return ss.find('1') - 1

def format_stepSize(val, step_size_str):
    val=float(val)
    step_size_str=str(step_size_str)
    if float(step_size_str)==1:
        frac, val=math.modf(float(val))
        val=int(val)
    else:
        precision = step_size_to_precision(step_size_str)
        val= "{:0.0{}f}".format(val, precision+1)
        val=val[:-1]+"0"
        val=float(val)
    return val

def ConfigSectionMap(section, Config):
  dict1 = {}
  options = Config.options(section)
  for option in options:    
    try:
      dict1[option] = Config.get(section, option)
      if dict1[option] == -1:
         print("skip: %s" % option)
    except:
      print("exception on %s!" % option)
      dict1[option] = None
  return dict1

def percentage_calc(percentage_calc_number, percentage_calc_percent):
    percentage_calc_result = float(percentage_calc_number)+float(percentage_calc_number)/100*float(percentage_calc_percent)
    return percentage_calc_result

def b_trade_to_order(b_trade_to_order_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    #Prend le trade puis fait un achat s'il est dans les seuils
    #Calc if price is on seuils
    load_trade(b_trade_to_order_file)
    if dct_FILE['symbol'] not in blacklist:
        if (whitelist <> "" and dct_FILE['symbol'] in whitelist) or whitelist == "":
            if binance_prices.get(dct_FILE['symbol']) is not None:

                dct_FILE['percentage_delta_buy']=percentage_delta_buy

                dct_FILE['LOT_SIZE_stepSize'] = float(get_stepSize(dct_FILE.get("symbol")))
                Buy_price_signal_down= percentage_calc(dct_FILE['BUY'], -dct_FILE['percentage_delta_buy'])
                Buy_price_signal_up= percentage_calc(dct_FILE['BUY'], dct_FILE['percentage_delta_buy'])
                dct_FILE['binance_price'] = float(binance_prices.get(dct_FILE['symbol']))
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Le prix actuel du "+dct_FILE['symbol']+" est "+float8f(dct_FILE['binance_price']), debugapp_logger=logger)
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Le prix demande du "+dct_FILE['symbol']+" est "+float8f(dct_FILE['BUY']), debugapp_logger=logger)
                #Calc how many BTC vs USD demand
                BTCUSDT=float(binance_prices.get("BTCUSDT"))
                Qty_signal=1/dct_FILE['BUY']/BTCUSDT*dct_FILE['USD']
                Qty_signal=format(Qty_signal, '.8f')
                #achatcoin=USD/prixbtc*coinbtc
                #200/7000*0.0000184
                if Buy_price_signal_down <= dct_FILE['binance_price'] <= Buy_price_signal_up:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+":prix entre les seuils d achat:"+float8f(dct_FILE['binance_price']), debugapp_logger=logger)
                    b_TRADE=b_order(dct_FILE['symbol'], Qty_signal, dct_FILE['BUY'],"BUY", "order_BUY")
                    if b_TRADE.get("orderId") is not None:
                        dct_FILE['last_orderId']=b_TRADE.get("orderId")
                        dct_FILE['order_BUY']=b_TRADE
                        dct_FILE['executedDate_creation']=datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")
                        dct_FILE['last_order_level']='order_BUY'
                        dct_FILE['filename']=dir_TRADES+dct_FILE['symbol']+"_"+datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")+".json"

                        dct_FILE['sell_part_t1']=sell_part_t1
                        dct_FILE['sell_part_t2']=sell_part_t2
                        dct_FILE['sell_part_t3']=sell_part_t3
                        dct_FILE['percentage_control_balance']=percentage_control_balance
                        dct_FILE['percentage_sl_upside']=percentage_sl_upside
                        dct_FILE['percentage_limit_order_before_tx']=percentage_limit_order_before_tx
                        dct_FILE['sl_replace_tx']=sl_replace_tx

                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order OK: deplace le fichier vers: "+dct_FILE['filename'].replace("/trades","/old"),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
                        save_obj(dct_FILE, dct_FILE['filename'])
                        try:
                            shutil.move(b_trade_to_order_file, dir_OLD+ntpath.basename(b_trade_to_order_file))
                        except:
                            pass
                    else:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order not OK:\n"+str(b_trade_to_order_file),debugapp_Telegram=1, debugapp_logger=logger)
                else:
                  debugapp(str(sys._getframe().f_code.co_name)+"|"+":prix PAS entre les seuils d achat:"+float8f(dct_FILE['binance_price']),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            else:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Inconnu: "+str(b_trade_to_order_file),debugapp_Telegram=1,debugapp_DebugLevel="ERROR", debugapp_logger=logger)
                    try:
                        shutil.move(b_trade_to_order_file, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
                    except: 
                        pass
        else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Not in whitelist: "+str(b_trade_to_order_file),debugapp_Telegram=1,debugapp_DebugLevel="ERROR", debugapp_logger=logger)
                try:
                    shutil.move(b_trade_to_order_file, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
                except: 
                    pass
    else:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"In blacklist: "+str(b_trade_to_order_file),debugapp_Telegram=1,debugapp_DebugLevel="ERROR", debugapp_logger=logger)
            try:
                shutil.move(b_trade_to_order_file, dir_PROBLEMS+ntpath.basename(b_trade_to_order_file))
            except: 
                pass
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def save_obj(obj, name ):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Sauve l objet vers: "+name,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    if not ".json" in name and not ".laststate" in name:
        with open(name, 'wb') as f:
#        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)
            pass
    else:
        save_obj_out_file = open(name,"w")
        json.dump(obj,save_obj_out_file, indent=4, sort_keys=True)                                    
        save_obj_out_file.close()

def load_obj(name ):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Ouvre l objet depuis: "+name,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    if not ".json" in name:
        with open(name, 'rb') as f:
            return pickle.load(f)
    else:
        with open(name) as json_data:
            dct_load_obj = json.load(json_data)
            json_data.close()
            return dct_load_obj

def binance_price(binance_price_symbol):
    return float(binance_prices.get(binance_price_symbol))
    
def sell_stats(sell_stats_current_order, sell_stats_current_level, gain_BTC, gain_USD):
    sell_stats_current_order["gain_USD"]=gain_USD
    sell_stats_current_order["gain_BTC"]=gain_BTC
    sell_stats_current_order["level"]=sell_stats_current_level
    sell_stats_current_order["origPrice"]=dct_FILE['order_BUY']['price']
    sell_stats_current_order["origTransactTime"]=dct_FILE['order_BUY']['transactTime']
    sell_stats_file=cwd+"/"+"sell_stats.json"
    sell_stats_date=datetime.datetime.now().strftime("%Y-%m-%d")
    if not os.path.isfile(sell_stats_file):
        dct_sell_stats = {}
        sell_stats_file_obj = open(sell_stats_file,"w")
        json.dump(dct_sell_stats,sell_stats_file_obj, indent=4, sort_keys=True)                                    
        sell_stats_file_obj.close()
    with open(sell_stats_file) as json_data:
        dct_sell_stats = json.load(json_data)
        if not findkeys(dct_sell_stats, sell_stats_date): dct_sell_stats[sell_stats_date] = {}
        dct_sell_stats[sell_stats_date][sell_stats_current_order.get("orderId")] = sell_stats_current_order
        json_data.close()
        sell_stats_file_obj = open(sell_stats_file,"w")
        json.dump(dct_sell_stats,sell_stats_file_obj, indent=4, sort_keys=True)                                    
        sell_stats_file_obj.close()

def which_level_what_do(which_level_what_do_price):
    dct_which_level_what_do = {}
    dct_which_level_what_do['vente_Qty'] = 'test'
    dct_which_level_what_do['vente_Qty_SL'] = 'test'
    dct_which_level_what_do['SL_Price'] = 'test'
    print float8f(which_level_what_do_price)
    which_level_what_do_price=percentage_calc(which_level_what_do_price, dct_FILE['percentage_limit_order_before_tx'])
    print float8f(which_level_what_do_price)
    
    #si t3 vend la mise executedQty_creation-executedQty_vendu
    if dct_FILE['T3'] < which_level_what_do_price:
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation']-dct_FILE['executedQty_vendu']
        dct_which_level_what_do['Current_TX']=dct_FILE['T3']
    #si t2 mais pas t3 ni t1 vend 75% de la mise et met un SL de 25% de la mise a T1
    if dct_FILE['T2'] < which_level_what_do_price and not findkeys(dct_FILE, "order_T3") and not findkeys(dct_FILE, "order_T1"):
        sell_part_t=dct_FILE['sell_part_t1']+dct_FILE['sell_part_t2']
        sell_part_sl=1-sell_part_t
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation'] * sell_part_t
        dct_which_level_what_do['vente_Qty_SL']=dct_FILE['executedQty_creation'] * sell_part_sl
        dct_which_level_what_do['SL_Price']=dct_FILE['T1']
        dct_which_level_what_do['Current_TX']=dct_FILE['T2']
    #si t2 mais pas t3 mais t1 vend 25% de la mise et met un SL de 25% de la mise a T1
    elif dct_FILE['T2'] < which_level_what_do_price and not findkeys(dct_FILE, "order_T3") and findkeys(dct_FILE, "order_T"):
        sell_part_t=dct_FILE['sell_part_t1']+dct_FILE['sell_part_t2']
        sell_part_sl=1-sell_part_t
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation']*dct_FILE['sell_part_t2']
        dct_which_level_what_do['vente_Qty_SL']=dct_FILE['executedQty_creation']*sell_part_sl
        dct_which_level_what_do['SL_Price']=dct_FILE['T1']
        dct_which_level_what_do['Current_TX']=dct_FILE['T2']
    #si t1 mais pas t3 ni t2 vend 50% de la mise et met un SL de ce qu il reste a Achat
    elif dct_FILE['T1'] < which_level_what_do_price and not findkeys(dct_FILE, "order_T3") and not findkeys(dct_FILE, "order_T2"):
        sell_part_t=dct_FILE['sell_part_t1']
        sell_part_sl=1-sell_part_t
        dct_which_level_what_do['vente_Qty']=dct_FILE['executedQty_creation']*dct_FILE['sell_part_t1']
        dct_which_level_what_do['vente_Qty_SL']=dct_FILE['executedQty_creation']*sell_part_sl
        dct_which_level_what_do['SL_Price']=float(dct_FILE['order_BUY_FILLED']['price'])
        dct_which_level_what_do['Current_TX']=dct_FILE['T1']
    return dct_which_level_what_do

def get_stepSize(get_stepSize_coin):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    symbols=get_stepSize_request.get("symbols")
    coin=filter(lambda symbol: symbol['symbol'] == get_stepSize_coin, symbols)
    a_coin=coin[0]
    filters=a_coin.get("filters")
    LOT_SIZE=filter(lambda filterType: filterType['filterType'] == 'LOT_SIZE', filters)
    a_LOT_SIZE=LOT_SIZE[0]
    stepSize=a_LOT_SIZE.get("stepSize")
    dct_FILE['PRICE_FILTER_tickSize']=float(a_coin['filters'][0]['tickSize'])
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return float(stepSize)

def binance_status(binance_status_symbol,  **kwargs):
    binance_status_test=kwargs.get('binance_status_test', None)
    binance_status_orderId=kwargs.get('orderId', None)
    binance_status_orderId_type=kwargs.get('binance_status_orderId_type', None)
    if binance_status_test:
        debugapp("Envoi d un faux status",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        # Open the file for reading
        if not binance_status_orderId_type:
            in_file = open("NEW_BUY","r")
        else:
            if binance_status_orderId_type=="NEW_BUY": in_file = open(dir_MODELS+"NEW_BUY","r")
            if binance_status_orderId_type=="NEW_SELL": in_file = open(dir_MODELS+"NEW_SELL","r")
            if binance_status_orderId_type=="FILLED_BUY": in_file = open(dir_MODELS+"FILLED_BUY","r")
            if binance_status_orderId_type=="FILLED_SELL": in_file = open(dir_MODELS+"FILLED_SELL","r")
            if binance_status_orderId_type=="CANCELED_BUY": in_file = open(dir_MODELS+"CANCELED_BUY","r")
            if binance_status_orderId_type=="CANCELED_SELL": in_file = open(dir_MODELS+"CANCELED_SELL","r")
            if binance_status_orderId_type=="CANCELED_SL": in_file = open(dir_MODELS+"CANCELED_SL","r")
        # Load the contents from the file, which creates a new dictionary
        binance_status_dict = json.load(in_file)
        # Close the file... we don't need it anymore  
        in_file.close()
        binance_status_dict['orderId']=binance_status_orderId
        return binance_status_dict
    else:
        debugapp("Envoi du status de binance",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        binance_status_order=binance.orderStatus(binance_status_symbol, orderId=binance_status_orderId)
        if binance_status_order.get("orderId") is not None:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+str(binance_status_order.get("orderId")),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            save_json(dir_TEMP+str(binance_status_order.get("orderId")), binance_status_order)
        return binance_status_order

def ToBeFilled():
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    for order_level_dictToBeFilled in dct_FILE['dictToBeFilled']:
        allOrders=None
        current_allOrders=None
        order_filtred=None
        if dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]==1:
            allOrders=binance.allOrders(dct_FILE.get("symbol"))
#                    allOrders=binance.allOrders("LOOOMBTC")
            if allOrders :
                save_json(dir_TEMP+"allOrders", allOrders)
                if isinstance(allOrders, list):
                    order_filtred=filter(lambda allOrders: allOrders['orderId'] == dct_FILE[order_level_dictToBeFilled]['orderId'], allOrders)
                    current_allOrders=order_filtred[0]
                    if current_allOrders['status']=="FILLED":
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Trade FILLED of order_"+str(current_allOrders.get("orderId")),debugapp_DebugLevel="DEBUG")
                        dct_FILE[order_level_dictToBeFilled+"_FILLED"]=current_allOrders
                        dct_FILE['last_order_level']=order_level_dictToBeFilled+"_FILLED"
                        dct_FILE['last_executedQty']=float(current_allOrders.get("executedQty"))
                        if dct_FILE['executedQty_creation']==0:
                            dct_FILE['executedQty_creation']=float(current_allOrders.get("executedQty"))
                        dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                        if current_allOrders['side']=="SELL":
                            dct_FILE['executedQty_vendu']=dct_FILE['executedQty_vendu']+float(current_allOrders['executedQty'])
                            prix_de_vente=float(current_allOrders['price'])
                            prix_achat=float(dct_FILE['order_BUY_FILLED']['price'])
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Diff BTC: "+str(prix_de_vente-prix_achat))
                            gain_BTC=(prix_de_vente-prix_achat)*float(current_allOrders['executedQty'])
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Gain BTC: "+str(gain_BTC))
                            BTCUSDT=float(binance_prices.get("BTCUSDT"))
                            gain_USD=gain_BTC*BTCUSDT
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Vente au level:"+order_level_dictToBeFilled,debugapp_Telegram=1)
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Vente de "+str(current_allOrders['executedQty'])+" de "+dct_FILE.get("symbol")+"\nGain $: "+str(gain_USD),debugapp_Telegram=1)
                            sell_stats(current_allOrders, order_level_dictToBeFilled, gain_BTC, gain_USD)
                        save_obj(dct_FILE, dct_FILE.get("filename"))
                    elif current_allOrders['status']=="CANCELED":
                        dct_FILE['dictToBeFilled'][order_level_dictToBeFilled]=0
                        save_obj(dct_FILE, dct_FILE.get("filename"))
                    else:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"En attente FILLED_"+str(dct_FILE[order_level_dictToBeFilled]['orderId']),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
                else:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+str(dct_FILE[order_level_dictToBeFilled]['orderId'])+":Error:"+str(allOrders['code'])+":"+allOrders['msg'],debugapp_DebugLevel="WARNING")
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+str(dct_FILE[order_level_dictToBeFilled]['orderId'])+":Orders empty:"+dct_FILE.get("symbol"),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)

def findkeys(d, findkeys_str):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    for key in d.keys():
        if findkeys_str in key:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
            return 1
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    return 0
    
def targetTX(targetTX_level):
    #Annule l Order SL
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Prix actuel superieur au "+targetTX_level+"_"+float8f(dct_FILE[targetTX_level])+"<"+str(binance_prices.get(dct_FILE.get("symbol"))))
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Annule l Order SL",debugapp_DebugLevel="DEBUG")
    current_order_cancel=binance.cancel(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"))
#    current_order_cancel=binance_status(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"), binance_status_test=1, binance_status_orderId_type="CANCELED_SL")
    if current_order_cancel.get("orderId") is not None:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Cancel:"+str(current_order_cancel.get("orderId")))
        save_json(dir_TEMP+str(current_order_cancel.get("orderId"))+"_C", current_order_cancel)
        dct_FILE["order_SL_CANCELED_ASKED"]=current_order_cancel
        count=0
        processed_order=1
        if targetTX_level=="T3":
            next_order_level="order_"+targetTX_level
        else:
            next_order_level="order_"+targetTX_level+"_SL"
        while count < 30 and dct_FILE["last_order_level"]<>next_order_level:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+str(count)+"s apres debut Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
            #Check si Order bien CANCELED
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"Check si Order bien CANCELED")
            current_order_status=binance_status(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"))
#            current_order_status=binance_status(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"), binance_status_test=1, binance_status_orderId_type="CANCELED_SL")
            if current_order_status.get("orderId") is not None:
                if current_order_status.get("status")=="CANCELED":
                    dct_FILE[dct_FILE.get("last_order_level")+"_CANCELED"]=current_order_status
                    #lance l Order de SELL "+targetTX_level+" avec les bonnes valeurs
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"lance l Order de SELL "+targetTX_level+" avec les bonnes valeurs")
                    dct_which_level_what_do=which_level_what_do(binance_price(dct_FILE.get("symbol")))
                    if dct_FILE['percentage_limit_order_before_tx']<>0:
                        current_order_SELL=b_order(dct_FILE.get("symbol"), dct_which_level_what_do["vente_Qty"], dct_which_level_what_do['Current_TX'],"SELL", "order_"+targetTX_level)
                    else:
                        current_order_SELL=b_order(dct_FILE.get("symbol"), dct_which_level_what_do["vente_Qty"], binance_price(dct_FILE.get("symbol")),"SELL", "order_"+targetTX_level)
#                    current_order_SELL=binance_status(dct_FILE.get("symbol"), orderId=43802508, binance_status_test=1, binance_status_orderId_type="NEW_SELL")
                    if current_order_SELL.get("orderId") is not None:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"SELL "+dct_FILE['symbol']+targetTX_level+" id:"+str(current_order_SELL.get("orderId")))
                        dct_FILE["order_"+targetTX_level]=current_order_SELL
                        dct_FILE["last_order_level"]="order_"+targetTX_level
                        save_obj(dct_FILE, dct_FILE.get("filename"))
                    if not targetTX_level=="T3":
                        #place le SL aussi
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"place le SL aussi")
                        current_order_SELL=b_order(dct_FILE.get("symbol"), dct_which_level_what_do["vente_Qty_SL"], dct_which_level_what_do["SL_Price"],"STOP-LIMIT", "order_"+targetTX_level+"_SL")
                        if current_order_SELL.get("orderId") is not None:
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+"_SL id:"+str(current_order_SELL.get("orderId")),debugapp_Telegram=1)
                            dct_FILE["order_"+targetTX_level+"_SL"]=current_order_SELL
                            dct_FILE["last_order_level"]="order_"+targetTX_level+"_SL"
                            save_obj(dct_FILE, dct_FILE.get("filename"))
                        else:
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+"_SL "+targetTX_level+":id empty:"+str(current_order_SELL),debugapp_Telegram=1,debugapp_DebugLevel="CRITICAL")
                else:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Attend Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
                    count = count + 1
                    time.sleep(1)
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+str(dct_FILE.get("last_SL_orderId"))+":Status order empty:"+str(current_order_status),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
        else:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+str(count)+ "s exit apres Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
    else:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+str(dct_FILE.get("last_SL_orderId"))+":Cancel order empty:"+str(current_order_cancel),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
def setup_logger(logger_name, log_file):
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"begin",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
    log_setup = logging.getLogger(logger_name)
    fileHandler = logging.FileHandler(log_file, mode='a')
    fileHandler.setFormatter(formatter)
    log_setup.addHandler(fileHandler) 
    log_setup.setLevel(level)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"end",debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
#############################################################################################################
#END FUNCTIONS###############################################################################################
#############################################################################################################

begin_time=datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")
###load params
load_params = ConfigParser.ConfigParser()
load_params.read("binance_api.ini")
###Percentages
percentage_delta_buy = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_delta_buy'])
percentage_control_balance = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_control_balance'])
percentage_sl_upside = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_sl_upside'])
percentage_under_tx = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_under_tx'])
percentage_limit_order_before_tx = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_limit_order_before_tx'])
sell_part_t1 = float(ConfigSectionMap("BINANCE_API", load_params)['sell_part_t1'])
sell_part_t2 = float(ConfigSectionMap("BINANCE_API", load_params)['sell_part_t2'])
sell_part_t3 = float(ConfigSectionMap("BINANCE_API", load_params)['sell_part_t3'])
percentage_force_sl = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_force_sl'])
percentage_near_sl = float(ConfigSectionMap("BINANCE_API", load_params)['percentage_near_sl'])
sl_replace_tx = ConfigSectionMap("BINANCE_API", load_params)['sl_replace_tx']
percentage_delta_buyed_sold = ConfigSectionMap("BINANCE_API", load_params)['percentage_delta_buyed_sold']
###Directories
cwd = os.getcwd()
if not os.path.exists(cwd+"/trades"):
    os.makedirs(cwd+"/trades")
if not os.path.exists(cwd+"/old"):
    os.makedirs(cwd+"/old")
if not os.path.exists(cwd+"/logs"):
    os.makedirs(cwd+"/logs")
if not os.path.exists(cwd+"/problems"):
    os.makedirs(cwd+"/problems")
if not os.path.exists(cwd+"/signals"):
    os.makedirs(cwd+"/signals")
if not os.path.exists(cwd+"/temp"):
    os.makedirs(cwd+"/temp")
if not os.path.exists(cwd+"/models"):
    os.makedirs(cwd+"/models")
if not os.path.exists(cwd+"/old"):
    os.makedirs(cwd+"/old")
dir_PROBLEMS=cwd+"/problems/"
dir_TEMP=cwd+"/temp/"
dir_MODELS=cwd+"/models/"
dir_SIGNALS=cwd+"/signals/"
dir_TRADES=cwd+"/trades/"
dir_OLD=cwd+"/old/"
###Logs
logger = logging.getLogger("binance")
log_level = str(ConfigSectionMap("BINANCE_API", load_params)['log_level'])
level = logging.getLevelName(log_level)
log_file=cwd+"/logs/binance_"+ datetime.datetime.now().strftime("%Y-%m-%d_%H")+".log"
hdlr = logging.FileHandler(log_file)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(level)
###Check pause
check_pause()
###Telegram
my_telegram_bot_token = ConfigSectionMap("BINANCE_API", load_params)['my_telegram_bot_token']
my_telegram_id = ConfigSectionMap("BINANCE_API", load_params)['my_telegram_id']
bot = telegram.Bot(token=my_telegram_bot_token)
#debugapp(str(sys._getframe().f_code.co_name)+"|"+str(bot.get_me()),debugapp_DebugLevel="DEBUG")
###Variables
processed_order=0
###Whitelist,Blacklist
whitelist = ConfigSectionMap("BINANCE_API", load_params)['whitelist']
blacklist = ConfigSectionMap("BINANCE_API", load_params)['blacklist']
###Binance
binance_key = ConfigSectionMap("BINANCE_API", load_params)['binance_key']
binance_secret = ConfigSectionMap("BINANCE_API", load_params)['binance_secret']
binance.set(binance_key, binance_secret)
#binance_balances=binance.balances()
binance_prices=binance.prices()
r_exchangeInfo=requests.get("https://www.binance.com/api/v1/exchangeInfo")
get_stepSize_request=r_exchangeInfo.json()
test_binance_prices=None
try:
    test_binance_prices=float(binance_prices.get("ETHBTC"))
except: 
    pass
if test_binance_prices is None:
    binance_prices=binance.prices()
    test_binance_prices=float(binance_prices.get("NEOBTC"))
    if not isinstance(test_binance_prices, float):
        binance_prices=binance.prices()

#print binance_prices
debugapp(str(sys._getframe().f_code.co_name)+"|"+"/////////begin script:"+begin_time, debugapp_logger=logger)
debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************", debugapp_logger=logger)
debugapp(str(sys._getframe().f_code.co_name)+"|"+"Price:"+"BTCUSDT:"+ str(binance_prices.get("BTCUSDT")),debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
debugapp(str(sys._getframe().f_code.co_name)+"|"+datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S"), debugapp_logger=logger)

#parse le dossier pour les fichiers
for filename in os.listdir(dir_TRADES):
    dct_FILE = {}
    if ".json" in filename and not ".log" in filename:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_TRADES+filename,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        dct_FILE=load_obj(dir_TRADES+filename)
        if not ".json" in dct_FILE['filename']:
            dct_FILE['filename']=dct_FILE['filename']+".json"
        if not dir_TRADES in dct_FILE['filename']:
            dct_FILE['filename']=dir_TRADES+filename
        dct_FILE['binance_price'] = float(binance_prices.get(dct_FILE['symbol']))
        dct_FILE['LOT_SIZE_stepSize'] = float(get_stepSize(dct_FILE.get("symbol")))
        setup_logger(dct_FILE['symbol'], dir_TRADES+filename+".log")
        logger_symbol= logging.getLogger(dct_FILE['symbol'])
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Cours actuel "+str(float8f(dct_FILE['binance_price']))+" "+dct_FILE['last_order_level'],debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        last_sl_stop=dct_FILE['SL']
        if dct_FILE.has_key('order_T2_SL'): last_sl_stop=dct_FILE['order_T2_SL']['stopPrice']
        if dct_FILE.has_key('order_T1_SL'): last_sl_stop=dct_FILE['order_T1_SL']['stopPrice']
        near_sl=float(dct_FILE['binance_price'])/float(last_sl_stop)*100-100
        near_sl=format(near_sl, '.1f')
        if float(near_sl)<=percentage_near_sl: debugapp(str(sys._getframe().f_code.co_name)+"|"+"Price:"+str(float8f(dct_FILE['binance_price']))+" near SL:"+str(float8f(last_sl_stop)), debugapp_logger=logger,debugapp_Telegram=1)
        save_obj(dct_FILE, dct_FILE.get("filename"))

        if dct_FILE['executedQty_creation']=="test": dct_FILE['executedQty_creation']=0
    #############################################################################################################
    #TESTS###############################################################################################
    #############################################################################################################
#        if "_FILLED_FILLED" in dct_FILE['last_order_level']:
    #############################################################################################################
    #TESTS###############################################################################################
    #############################################################################################################
        if dct_FILE.has_key('panicsell'):
            if dct_FILE['panicsell']==1:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Annule l Order SL",debugapp_DebugLevel="DEBUG")
                current_order_cancel=binance.cancel(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"))
#                current_order_cancel=binance_status(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"), binance_status_test=1, binance_status_orderId_type="CANCELED_SL")
                if current_order_cancel.get("orderId") is not None:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Cancel:"+str(current_order_cancel.get("orderId")))
                    save_json(dir_TEMP+str(current_order_cancel.get("orderId"))+"_C", current_order_cancel)
                    dct_FILE["order_SL_CANCELED_ASKED"]=current_order_cancel
                    count=0
                    processed_order=1
                    while count < 30 and dct_FILE["last_order_level"]<>"order_"+"Panicsell":
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+str(count)+"s apres debut Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
                        #Check si Order bien CANCELED
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+"Check si Order bien CANCELED")
                        current_order_status=binance_status(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"))
#                        current_order_status=binance_status(dct_FILE.get("symbol"), orderId=dct_FILE.get("last_SL_orderId"), binance_status_test=1, binance_status_orderId_type="CANCELED_SL")
                        if current_order_status.get("orderId") is not None:
                            if current_order_status.get("status")=="CANCELED":
                                dct_FILE[dct_FILE.get("last_order_level")+"_CANCELED"]=current_order_status
                                #lance l Order de SELL "+"Panicsell"+" avec les bonnes valeurs
                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"lance l Order de SELL "+"Panicsell"+" avec les bonnes valeurs")
                                allQty=float(dct_FILE["executedQty_creation"])-float(dct_FILE["executedQty_vendu"])
#                                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Panic sell",debugapp_DebugLevel="DEBUG",debugapp_Telegram=1)
                                current_order_SELL=b_order(dct_FILE.get("symbol"), allQty, binance_price(dct_FILE.get("symbol")),"SELL", "order_"+"Panicsell")
#                                current_order_SELL=binance_status(dct_FILE.get("symbol"), orderId=43802508, binance_status_test=1, binance_status_orderId_type="NEW_SELL")
                                if current_order_SELL.get("orderId") is not None:
                                    dct_FILE['panicsell']=0
                                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Panicsell:"+dct_FILE['symbol']+" id:"+str(current_order_SELL.get("orderId")),debugapp_Telegram=1)
                                    dct_FILE["order_"+"Panicsell"]=current_order_SELL
                                    dct_FILE["last_order_level"]="order_"+"Panicsell"
                                    save_obj(dct_FILE, dct_FILE.get("filename"))
                                else:
                                    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Attend Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
                                    count = count + 1
                                    time.sleep(1)
                        else:
                            debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+str(dct_FILE.get("last_SL_orderId"))+":Status order empty:"+str(current_order_status),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
                    else:
                        debugapp(str(sys._getframe().f_code.co_name)+"|"+str(count)+ "s exit apres Check si Order bien CANCELED",debugapp_DebugLevel="DEBUG")
                else:
                    debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE['symbol']+str(dct_FILE.get("last_SL_orderId"))+":Cancel order empty:"+str(current_order_cancel),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)

        if dct_FILE['dictToBeFilled'].has_key("order_BUY"):
            ToBeFilled()

#        if (dct_FILE.get("last_order_level")=='order_T3_FILLED' or dct_FILE.get("last_order_level")=='order_SL_FILLED' or float(dct_FILE['executedQty_creation'])<=(float(dct_FILE['executedQty_vendu'])+float(dct_FILE['executedQty_creation'])/100)) and float(dct_FILE['executedQty_creation'])<>0:
        if float(dct_FILE['executedQty_creation'])<=percentage_calc(dct_FILE['executedQty_vendu'], percentage_delta_buyed_sold) and float(dct_FILE['executedQty_creation'])<>0:
            debugapp(str(sys._getframe().f_code.co_name)+"|"+dct_FILE.get("last_order_level")+" Fin du trade: deplace le fichier dans old",debugapp_DebugLevel="DEBUG",debugapp_Telegram=1)
            save_obj(dct_FILE, dct_FILE.get("filename"))
            try:
                shutil.move(dct_FILE.get("filename"), dir_OLD+ntpath.basename(dct_FILE.get("filename")))
                shutil.move(dct_FILE.get("filename")+".log", dir_OLD+ntpath.basename(dct_FILE.get("filename")+".log"))
            except: 
                pass
            
        if dct_FILE.get("last_order_level")=='order_BUY_FILLED':
            #lance l Order de SL avec les bonnes valeurs
            debugapp(str(sys._getframe().f_code.co_name)+"|"+"last_order_level=order_BUY_FILLED",debugapp_DebugLevel="DEBUG")
            current_order_BUY_FILLED=b_order(dct_FILE.get("symbol"), dct_FILE.get('order_BUY_FILLED', {}).get('executedQty'), dct_FILE.get("SL"),"STOP-LIMIT", "order_SL")
            if current_order_BUY_FILLED.get("orderId") is not None:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Place SL order_ "+str(current_order_BUY_FILLED.get("orderId")),debugapp_DebugLevel="DEBUG")
                dct_FILE['order_SL']=current_order_BUY_FILLED
                dct_FILE['last_order_level']='order_SL'
                dct_FILE['current_SL']='order_SL'
                save_obj(dct_FILE, dct_FILE.get("filename"))
            else:
                debugapp(str(sys._getframe().f_code.co_name)+"|"+"Order empty:"+str(current_order_BUY_FILLED),debugapp_DebugLevel="CRITICAL",debugapp_Telegram=1)
            #teste si prix actuel > T3, annule l Order et renome le fichier _T3_C
            
        if 'order_BUY_FILLED' in dct_FILE.keys() and not 'order_Panicsell_FILLED' in dct_FILE.keys():
            current_price=percentage_calc(binance_price(dct_FILE.get("symbol")), dct_FILE['percentage_limit_order_before_tx'])
            if dct_FILE['T3'] < current_price and not findkeys(dct_FILE, "order_T3"):
                #si dct_FILE['sl_replace_tx'] et T3 mais pas SLT2 alors annule SLT2 et ajoute dct_FILE['sell_part_t2'] a dct_FILE['sell_part_t3'] puis lance SLT3 puis envoi une info trade a finir a la main ou en mode auto SL qui suit le prix actuel
                targetTX('T3')
            elif dct_FILE['T2'] < current_price and not findkeys(dct_FILE, "order_T2") and not findkeys(dct_FILE, "order_T3"):
                targetTX('T2')
            elif dct_FILE['T1'] < current_price and not findkeys(dct_FILE, "order_T"):
                targetTX('T1')
        debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************", debugapp_logger=logger)
    elif not ".json" in filename and not ".log" in filename:
        debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_TRADES+filename,debugapp_DebugLevel="DEBUG", debugapp_logger=logger)
        dct_FILE=load_obj(dir_TRADES+filename)
#        os.rename(dct_FILE.get("filename"), dct_FILE.get("filename").replace("/trades","/old"))
        shutil.move(dct_FILE.get("filename"), dir_OLD+ntpath.basename(dct_FILE.get("filename")))
        dct_FILE['filename']=dir_TRADES+filename+".json"
        save_obj(dct_FILE, dct_FILE.get("filename"))
        
dct_FILE = {}
logger_symbol = logging.getLogger("binance")
for filename in os.listdir(dir_SIGNALS):
    dct_FILE = {}
    debugapp(str(sys._getframe().f_code.co_name)+"|"+dir_SIGNALS+filename)
    b_trade_to_order(dir_SIGNALS+filename)
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"*************************************************")

if processed_order==0:
    debugapp(str(sys._getframe().f_code.co_name)+"|"+"Aucun traitement",debugapp_DebugLevel="DEBUG")
#    bot.sendMessage(chat_id=my_telegram_id, text="Aucun traitement")
debugapp(str(sys._getframe().f_code.co_name)+"|"+"/////////end script:"+begin_time+"\n",debugapp_DebugLevel="DEBUG")
sys.exit()
#############################################################################################################
#END SCRIPT##################################################################################################
#############################################################################################################
